/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2023-05-27 06:06:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.codeeditor;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class codeEditor_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1679567181629L));
    _jspx_dependants.put("jar:file:/E:/A_TeachingMaterial/05_JSP_Spring/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ourmine/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<style>\r\n");
      out.write("#codeList li:hover {\r\n");
      out.write("  cursor: pointer;\r\n");
      out.write("  color: red;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"_csrf_header\" th:content=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${_csrf.headerName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("\t<meta name=\"_csrf\" th:content=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${_csrf.token}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("    <title>RexTester API Test</title>\r\n");
      out.write("    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("\t<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/js/codemirror.js\"></script>\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/css/codemirror.css\">\r\n");
      out.write("    <script>\r\n");
      out.write("    var header = $(\"meta[name='_csrf_header']\").prop('content');\r\n");
      out.write("    var token = $(\"meta[name='_csrf']\").prop('content');\r\n");
      out.write("    var memberId = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${memberId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(";\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        $(document).ready(function() {\r\n");
      out.write("            // 코드 실행 버튼 클릭 시 이벤트 처리\r\n");
      out.write("\t\t    console.log(\"memberId : \", memberId);\r\n");
      out.write("            changeLanguage();\r\n");
      out.write("            $(\"#executeBtn\").click(function() {\r\n");
      out.write("                executeCode();\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("        \t$(\"#showCodeListBtn\").click(function() {\r\n");
      out.write("        \t    // 버튼 클릭 시 코드 리스트를 가져와서 표시하는 함수 호출\r\n");
      out.write("        \t    loadCodeList();\r\n");
      out.write("        \t  });\r\n");
      out.write("\r\n");
      out.write("        \t// 코드 저장 버튼 클릭 시 이벤트 처리\r\n");
      out.write("            $(\"#saveBtn\").click(function() {\r\n");
      out.write("                saveCode();\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("        \t// 코드 수정 버튼 클릭 시 이벤트 처리\r\n");
      out.write("            $(\"#editBtn\").click(function() {\r\n");
      out.write("                updateCode();\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            $(\"#cancelBtn\").click(function() {\r\n");
      out.write("                cancelModify();\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("//             var textarea = document.getElementById('code');\r\n");
      out.write("//             // 에디터 설정\r\n");
      out.write("//             var editor = CodeMirror.fromTextArea(textarea, {\r\n");
      out.write("//             \tlineNumbers: true,\r\n");
      out.write("//                 autoCloseTags: true,\r\n");
      out.write("//                 matchTags: { bothTags: true },\r\n");
      out.write("//                 mode: \"text/html\",\r\n");
      out.write("//                 theme: \"default\",\r\n");
      out.write("//                 indentUnit: 4,\r\n");
      out.write("//                 tabSize: 4,\r\n");
      out.write("//                 indentWithTabs: true,\r\n");
      out.write("//                 extraKeys: {\r\n");
      out.write("//                     \"Ctrl-Space\": \"autocomplete\"\r\n");
      out.write("//                 }\r\n");
      out.write("//             });\r\n");
      out.write("\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("\t\t\tfunction cancelModify(){\r\n");
      out.write("\t\t\t\t$(\"#code\").val('');\r\n");
      out.write("\t\t\t\tchangeLanguage();\r\n");
      out.write("\t\t\t\t$(\"#codeList\").hide();\r\n");
      out.write("\t\t\t\t$(\"#showCodeListBtn\").show();\r\n");
      out.write("\t\t\t\t$(\"#saveBtn\").hide();\r\n");
      out.write("            \t  $(\"#codeTitle\").hide();\r\n");
      out.write("\t\t\t\t$(\"#editBtn\").hide();\r\n");
      out.write("\t\t\t\t$(\"#cancelBtn\").hide();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            function loadCodeList() {\r\n");
      out.write("            \t  // 코드 리스트를 가져오는 AJAX 요청\r\n");
      out.write("            \t  $.ajax({\r\n");
      out.write("            \t    url: \"/ourmine/company/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${companyId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/project/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projectId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/codeEditor/codeList?memberId=\" + memberId,\r\n");
      out.write("            \t    method: \"GET\",\r\n");
      out.write("                    contentType: \"application/json\",\r\n");
      out.write("                    dataType : \"json\",\r\n");
      out.write("            \t    success: function(response) {\r\n");
      out.write("            \t    \tconsole.log(\"response : \", response);\r\n");
      out.write("                        // AJAX 요청이 성공하면 코드 리스트를 표시\r\n");
      out.write("\r\n");
      out.write("            \t    \tconsole.log(typeof response);\r\n");
      out.write("                        // var codeList = JSON.parse(response);\r\n");
      out.write("                        // codeList.forEach(function (item) {\r\n");
      out.write("                        //     console.log(item);\r\n");
      out.write("                        // });\r\n");
      out.write("            \t      displayCodeList(response);\r\n");
      out.write("            \t    },\r\n");
      out.write("            \t    error: function(xhr, status, error) {\r\n");
      out.write("            \t      console.error(\"Error: \" + error);\r\n");
      out.write("            \t    }\r\n");
      out.write("            \t  });\r\n");
      out.write("            \t}\r\n");
      out.write("\r\n");
      out.write("            \tfunction displayCodeList(codeList) {\r\n");
      out.write("            \t\t// 코드 내용이 표시되면 Save 버튼을 활성화\r\n");
      out.write("              \t  $(\"#saveBtn\").show();\r\n");
      out.write("              \t  $(\"#codeTitle\").show();\r\n");
      out.write("//               \t  $(\"#editBtn\").hide();\r\n");
      out.write("\r\n");
      out.write("            \t  // 코드 리스트를 표시할 엘리먼트 선택\r\n");
      out.write("            \t  console.log(\"codeList : \", codeList);\r\n");
      out.write("            \t  var codeListElement = $(\"#codeList\");\r\n");
      out.write("\r\n");
      out.write("            \t  // 기존의 코드 리스트를 초기화\r\n");
      out.write("            \t  codeListElement.empty();\r\n");
      out.write("\r\n");
      out.write("            \t  // 코드 리스트를 순회하며 각 코드를 리스트 아이템으로 추가\r\n");
      out.write("            \t  codeList.forEach(function(code) {\r\n");
      out.write("            \t\t  console.log(\"code : \", code);\r\n");
      out.write("            \t    var listItem = $(\"<li>\").text(code.CODE_TITLE);\r\n");
      out.write("\r\n");
      out.write("            \t    // 리스트 아이템을 클릭했을 때 해당 코드를 표시하는 이벤트 핸들러 등록\r\n");
      out.write("            \t    listItem.click(function() {\r\n");
      out.write("            \t      showCodeContent(code.CODE_CONTENT);\r\n");
      out.write("\t\t\t\t\t\tlet editorId = code.CODE_EDITOR_ID;\r\n");
      out.write("\t\t\t\t\t\tconsole.log(\"editorId : \", editorId);\r\n");
      out.write("\t\t\t\t\t\t$(\"#languageChoice option\").each(function() {\r\n");
      out.write("\t\t\t\t\t        if ($(this).val() === editorId) {\r\n");
      out.write("\t\t\t\t\t          $(this).prop(\"selected\", true);\r\n");
      out.write("\t\t\t\t\t        } else {\r\n");
      out.write("\t\t\t\t\t          $(this).prop(\"selected\", false);\r\n");
      out.write("\t\t\t\t\t        }\r\n");
      out.write("\t\t\t\t\t     });\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t$(\"#codeId\").val(code.CODE_ID);\r\n");
      out.write("\t\t\t\t\t\t$(\"#editBtn\").show();\r\n");
      out.write("\t\t\t\t\t\t$(\"#cancelBtn\").show();\r\n");
      out.write("\t\t\t\t\t      // 저장 버튼 비활성화\r\n");
      out.write("\t\t\t\t      \t$(\"#showCodeListBtn\").hide();\r\n");
      out.write("\t\t\t\t      \t$(\"#codeTitle\").hide();\r\n");
      out.write("\t\t\t\t      \t$(\"#saveBtn\").hide();\r\n");
      out.write("            \t    });\r\n");
      out.write("            \t    // 리스트 아이템을 코드 리스트에 추가\r\n");
      out.write("            \t    codeListElement.append(listItem);\r\n");
      out.write("            \t  });\r\n");
      out.write("\r\n");
      out.write("            \t  // 코드 리스트를 표시\r\n");
      out.write("            \t  $(\"#codeListContainer\").show();\r\n");
      out.write("            \t}\r\n");
      out.write("\r\n");
      out.write("            \tfunction showCodeContent(content) {\r\n");
      out.write("            \t  // 코드 내용을 textarea에 표시\r\n");
      out.write("            \t  $(\"#code\").val(content);\r\n");
      out.write("\r\n");
      out.write("            \t}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t// 프로그래밍 언어 변환시 함수\r\n");
      out.write("\t\tfunction changeLanguage(){\r\n");
      out.write("\t\t\tvar languageChoice = document.getElementById(\"languageChoice\");\r\n");
      out.write("            var selectedOption = languageChoice.options[languageChoice.selectedIndex];\r\n");
      out.write("\r\n");
      out.write("            var selectedValue = selectedOption.value;\r\n");
      out.write("\r\n");
      out.write("            var xhr = new XMLHttpRequest();\r\n");
      out.write("            xhr.onreadystatechange = function() {\r\n");
      out.write("                if (xhr.readyState === XMLHttpRequest.DONE) {\r\n");
      out.write("                if (xhr.status === 200) {\r\n");
      out.write("                    var response = xhr.responseText;\r\n");
      out.write("                    document.getElementById(\"code\").value = response;\r\n");
      out.write("                } else {\r\n");
      out.write("                    console.error(\"Error: \" + xhr.status);\r\n");
      out.write("                }\r\n");
      out.write("                }\r\n");
      out.write("            };\r\n");
      out.write("\r\n");
      out.write("            xhr.open(\"GET\", \"/ourmine/company/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${companyId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/project/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projectId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/codeEditor/getExampleCode?language=\" + selectedValue, true);\r\n");
      out.write("            xhr.send();\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("\t\tfunction updateCode() {\r\n");
      out.write("\t\t\t  var codeEditorId = $(\"#languageChoice\").val();\r\n");
      out.write("\t\t\t  var codeTitle = $(\"#codeTitle\").val();\r\n");
      out.write("\t\t\t  var codeId = $(\"#codeId\").val();\r\n");
      out.write("\t\t\t  var codeContent = $(\"#code\").val();\r\n");
      out.write("\r\n");
      out.write("\t\t\t  $.ajax({\r\n");
      out.write("\t\t\t    type: \"POST\",\r\n");
      out.write("\t\t\t    dataType: \"json\",\r\n");
      out.write("\t\t\t    contentType: \"application/json; charset=utf-8\",\r\n");
      out.write("\t\t\t    url: \"/ourmine/company/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${companyId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/project/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projectId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/codeEditor/updateCode\",\r\n");
      out.write("\t\t\t    data: JSON.stringify({\r\n");
      out.write("\t\t\t    \tcodeId: codeId,\r\n");
      out.write("\t\t\t      codeTitle: codeTitle,\r\n");
      out.write("\t\t\t      codeContent: codeContent,\r\n");
      out.write("\t\t\t      codeEditorId: codeEditorId\r\n");
      out.write("\t\t\t    }),\r\n");
      out.write("\t\t\t    beforeSend: function(xhr) {\r\n");
      out.write("\t\t\t      xhr.setRequestHeader(header, token);\r\n");
      out.write("\t\t\t    },\r\n");
      out.write("\t\t\t    success: function(response) {\r\n");
      out.write("\t\t\t      $(\"#saveMessage\").text(\"코드가 업데이트되었습니다.\");\r\n");
      out.write("\t\t\t      loadCodeList();\r\n");
      out.write("\t\t\t    },\r\n");
      out.write("\t\t\t    error: function(xhr, status, error) {\r\n");
      out.write("\t\t\t      console.log(\"Error: \", error);\r\n");
      out.write("\t\t\t    }\r\n");
      out.write("\t\t\t  });\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t function saveCode() {\r\n");
      out.write("\t\t\t    var codeEditorId = document.getElementById(\"languageChoice\").value;\r\n");
      out.write("\t            var codeTitle = $(\"#codeTitle\").val();\r\n");
      out.write("\t            var codeContent = $(\"#code\").val();\r\n");
      out.write("\r\n");
      out.write("\t            let url = \"/ourmine/company/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${companyId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/project/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projectId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/codeEditor/saveCode\";\r\n");
      out.write("\r\n");
      out.write("\t            $.ajax({\r\n");
      out.write("\t                type: \"POST\",\r\n");
      out.write("\t                dataType: \"text\",\r\n");
      out.write("\t                contentType: \"application/json; charset=utf-8\",\r\n");
      out.write("\t                url: url,\r\n");
      out.write("\t                data: JSON.stringify({\r\n");
      out.write("\t                \tmemberId: memberId,\r\n");
      out.write("\t                    codeTitle: codeTitle,\r\n");
      out.write("\t                    codeContent: codeContent,\r\n");
      out.write("\t                    codeEditorId: codeEditorId\r\n");
      out.write("\t                }),\r\n");
      out.write("\t                beforeSend: function(xhr) {\r\n");
      out.write("\t                    xhr.setRequestHeader(header, token);\r\n");
      out.write("\t                },\r\n");
      out.write("\t                success: function(response) {\r\n");
      out.write("\t                \t$(\"#saveMessage\").text(\"코드가 저장되었습니다.\");\r\n");
      out.write("\t                    loadCodeList();\r\n");
      out.write("\t                },\r\n");
      out.write("\t                error: function(xhr, status, error) {\r\n");
      out.write("\t                    console.log(\"Error: \", error);\r\n");
      out.write("\t                }\r\n");
      out.write("\t            });\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("        function executeCode() {\r\n");
      out.write("            // 사용자가 선택한 언어와 작성한 코드 가져오기\r\n");
      out.write("            var languageChoice = $(\"#languageChoice\").val();\r\n");
      out.write("            var code = $(\"#code\").val();\r\n");
      out.write("            console.log(\"data={}\", JSON.stringify({\r\n");
      out.write("                languageChoice: languageChoice,\r\n");
      out.write("                code: code\r\n");
      out.write("            }))\r\n");
      out.write("            let url = \"/ourmine/company/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${companyId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/project/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projectId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/codeEditor/excuteCode\";\r\n");
      out.write("\t\t\tconsole.log(\"url : \", url);\r\n");
      out.write("//             let apiKey = \"{apiKey}\";\r\n");
      out.write("            // API 호출 및 결과 처리\r\n");
      out.write("            $.ajax({\r\n");
      out.write("                type: \"POST\",\r\n");
      out.write("                dataType : \"json\",\r\n");
      out.write("\t\t\t\tcontentType: \"application/json; charset=utf-8\",\r\n");
      out.write("                url: url,\r\n");
      out.write("\r\n");
      out.write("                data: JSON.stringify({\r\n");
      out.write("                    languageChoice: languageChoice,\r\n");
      out.write("                    code: code\r\n");
      out.write("                }),\r\n");
      out.write("                beforeSend: function(xhr){\r\n");
      out.write("                    xhr.setRequestHeader(header, token);\r\n");
      out.write("                },\r\n");
      out.write("                success: function(response) {\r\n");
      out.write("                    // 컴파일 결과를 화면에 출력\r\n");
      out.write("                    console.log(\"response : \", response);\r\n");
      out.write("                    if (response.Result !== null && response.Result !== undefined) {\r\n");
      out.write("                        $(\"#resultContainer\").show();\r\n");
      out.write("                        $(\"#result\").html(response.Result);\r\n");
      out.write("                    } else {\r\n");
      out.write("                        $(\"#resultContainer\").hide();\r\n");
      out.write("                        $(\"#result\").html(\"\");\r\n");
      out.write("                    }\r\n");
      out.write("                    if (response.Errors !== null && response.Errors !== undefined) {\r\n");
      out.write("                        $(\"#errorsContainer\").show();\r\n");
      out.write("                        $(\"#errors\").text(response.Errors);\r\n");
      out.write("                    } else {\r\n");
      out.write("                        $(\"#errorsContainer\").hide();\r\n");
      out.write("                        $(\"#errors\").text(\"\");\r\n");
      out.write("                    }\r\n");
      out.write("                    if (response.Warnings !== null && response.Warnings !== undefined) {\r\n");
      out.write("                        $(\"#warningsContainer\").show();\r\n");
      out.write("                        $(\"#warnings\").text(response.Warnings);\r\n");
      out.write("                    } else {\r\n");
      out.write("                        $(\"#warningsContainer\").hide();\r\n");
      out.write("                        $(\"#warnings\").text(\"\");\r\n");
      out.write("                    }\r\n");
      out.write("                    if (response.Stats !== null && response.Stats !== undefined) {\r\n");
      out.write("                        $(\"#statsContainer\").show();\r\n");
      out.write("                        $(\"#stats\").text(response.Stats);\r\n");
      out.write("                    } else {\r\n");
      out.write("                        $(\"#statsContainer\").hide();\r\n");
      out.write("                        $(\"#stats\").text(\"\");\r\n");
      out.write("                    }\r\n");
      out.write("                    if (response.Files !== null && response.Files !== undefined) {\r\n");
      out.write("                        $(\"#filesContainer\").show();\r\n");
      out.write("                        $(\"#files\").text(response.Files);\r\n");
      out.write("                    } else {\r\n");
      out.write("                        $(\"#filesContainer\").hide();\r\n");
      out.write("                        $(\"#files\").text(\"\");\r\n");
      out.write("                    }\r\n");
      out.write("                },\r\n");
      out.write("                error: function(xhr, status, error) {\r\n");
      out.write("                \tconsole.log(\"xhr : \", xhr);\r\n");
      out.write("                \tconsole.log(\"status: \", status);\r\n");
      out.write("                    console.log(\"Error: \", error);\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t</script>\r\n");
      out.write("    <select id=\"languageChoice\" onchange = \"changeLanguage()\">\r\n");
      out.write("        <option value=\"4\" active>Java</option>\r\n");
      out.write("        <option value=\"5\">Python</option>\r\n");
      out.write("        <option value=\"1\">C#</option>\r\n");
      out.write("        <option value=\"8\" >PHP</option>\r\n");
      out.write("        <option value=\"17\">JavaScript</option>\r\n");
      out.write("        <option value=\"25\">Node.js</option>\r\n");
      out.write("        <option value=\"28\" >C++ (vc++)</option>\r\n");
      out.write("        <option value=\"37\">Swift</option>\r\n");
      out.write("    </select>\r\n");
      out.write("    <br>\r\n");
      out.write("\t<input type=\"text\" id=\"codeId\" style=\"display: none;\" placeholder=\"저장할 타이틀을 작성하세요\">\r\n");
      out.write("\t<div id=\"editor-container\">\r\n");
      out.write("\t  <textarea id=\"code\" rows=\"20\" cols=\"100\"></textarea>\r\n");
      out.write("\t  <pre id=\"highlighting-code\"><code></code></pre>\r\n");
      out.write("\t</div>\r\n");
      out.write("    <br>\r\n");
      out.write("    <button id=\"executeBtn\">Execute</button>\r\n");
      out.write("    <button id=\"showCodeListBtn\">저장</button>\r\n");
      out.write("\t<input type=\"text\" id=\"codeTitle\" style=\"display: none;\" placeholder=\"저장할 타이틀을 작성하세요\">\r\n");
      out.write("\t<button id=\"saveBtn\" style=\"display: none;\">Save</button>\r\n");
      out.write("\t<button id=\"editBtn\" style=\"display: none;\">수정</button>\r\n");
      out.write("\t<button id=\"cancelBtn\" style=\"display: none;\">취소</button>\r\n");
      out.write("\t<div id=\"saveMessage\"></div>\r\n");
      out.write("\r\n");
      out.write("\t<div id=\"codeListContainer\" style=\"display: none;\">\r\n");
      out.write("\t  <h3>Code List : </h3>\r\n");
      out.write("\t  <ul id=\"codeList\"></ul>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("    <div id=\"resultContainer\" style=\"display: none;\">\r\n");
      out.write("        <h3>Result:</h3>\r\n");
      out.write("        <pre id=\"result\"></pre>\r\n");
      out.write("    </div>\r\n");
      out.write("    <br>\r\n");
      out.write("    <div id=\"errorsContainer\" style=\"display: none;\">\r\n");
      out.write("        <h3>Errors:</h3>\r\n");
      out.write("        <pre id=\"errors\"></pre>\r\n");
      out.write("    </div>\r\n");
      out.write("    <br>\r\n");
      out.write("    <div id=\"warningsContainer\" style=\"display: none;\">\r\n");
      out.write("        <h3>Warnings:</h3>\r\n");
      out.write("        <pre id=\"warnings\"></pre>\r\n");
      out.write("    </div>\r\n");
      out.write("    <br>\r\n");
      out.write("    <div id=\"statsContainer\" style=\"display: none;\">\r\n");
      out.write("        <h3>Stats:</h3>\r\n");
      out.write("        <pre id=\"stats\"></pre>\r\n");
      out.write("    </div>\r\n");
      out.write("    <br>\r\n");
      out.write("    <div id=\"filesContainer\" style=\"display: none;\">\r\n");
      out.write("        <h3>Files:</h3>\r\n");
      out.write("        <pre id=\"files\"></pre>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
