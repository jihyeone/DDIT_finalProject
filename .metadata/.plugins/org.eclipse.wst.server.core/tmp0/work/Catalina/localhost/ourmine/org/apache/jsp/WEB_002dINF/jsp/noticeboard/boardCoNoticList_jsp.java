/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2023-06-07 09:39:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.noticeboard;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class boardCoNoticList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(6);
    _jspx_dependants.put("jar:file:/E:/A_TeachingMaterial/05_JSP_Spring/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ourmine/WEB-INF/lib/spring-security-taglibs-5.7.8.jar!/META-INF/security.tld", Long.valueOf(1681713972000L));
    _jspx_dependants.put("/WEB-INF/lib/spring-security-taglibs-5.7.8.jar", Long.valueOf(1683020361417L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1679567181629L));
    _jspx_dependants.put("jar:file:/E:/A_TeachingMaterial/05_JSP_Spring/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ourmine/WEB-INF/lib/spring-webmvc-5.3.6.jar!/META-INF/spring-form.tld", Long.valueOf(1618279800000L));
    _jspx_dependants.put("jar:file:/E:/A_TeachingMaterial/05_JSP_Spring/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ourmine/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/spring-webmvc-5.3.6.jar", Long.valueOf(1680657633229L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fsecurity_005fauthorize_0026_005faccess;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fsecurity_005fcsrfInput_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fsecurity_005fauthorize_0026_005faccess = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fsecurity_005fcsrfInput_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fsecurity_005fauthorize_0026_005faccess.release();
    _005fjspx_005ftagPool_005fsecurity_005fcsrfInput_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("/* 그리드 헤더 색상 */\r\n");
      out.write(".ag-theme-alpine { \r\n");
      out.write("\t--ag-header-background-color: #484c7f;\r\n");
      out.write("\t--ag-header-foreground-color: #ffffff;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 그리드 내용 가운데 정렬 */\r\n");
      out.write(".ag-row .ag-cell {\r\n");
      out.write("\tdisplay: flex;\r\n");
      out.write("\tjustify-content: center; /* align horizontal */\r\n");
      out.write("\talign-items: center;\r\n");
      out.write("\t/* \t\talign-content: center; */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".ag-header-cell-text {\r\n");
      out.write("\tmargin-left: 60px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#jiModal {\r\n");
      out.write("\tdisplay: block;\r\n");
      out.write("\tposition: fixed;\r\n");
      out.write("\tleft: 0px;\r\n");
      out.write("\ttop: 0px;\r\n");
      out.write("\twidth: 100vw;\r\n");
      out.write("\theight: 100vh;\r\n");
      out.write("\tbackground-color: rgba(0, 0, 0, 0.5);\r\n");
      out.write("\tcolor: black;\r\n");
      out.write("\tz-index: 99999999999; /* 상당히 큰값을 오디선가 다른 곳에 주었음! */\r\n");
      out.write("\tdisplay: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#jiModal2 {\r\n");
      out.write("\tdisplay: block;\r\n");
      out.write("\tposition: fixed;\r\n");
      out.write("\tleft: 0px;\r\n");
      out.write("\ttop: 0px;\r\n");
      out.write("\twidth: 100vw;\r\n");
      out.write("\theight: 100vh;\r\n");
      out.write("\tbackground-color: rgba(0, 0, 0, 0.5);\r\n");
      out.write("\tcolor: black;\r\n");
      out.write("\tz-index: 999999999999; /* 상당히 큰값을 오디선가 다른 곳에 주었음! */\r\n");
      out.write("\tdisplay: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#jiContent {\r\n");
      out.write("\tmargin: 15% auto;\r\n");
      out.write("\twidth: 800px;\r\n");
      out.write("\theight: 700px;\r\n");
      out.write("\tbackground-color: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#jiContent2 {\r\n");
      out.write("\tmargin: 5% auto;\r\n");
      out.write("\twidth: 800px;\r\n");
      out.write("\theight: 700px;\r\n");
      out.write("\tbackground-color: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#jiinsertContent {\r\n");
      out.write("\tmargin: 45% -30%;\r\n");
      out.write("\twidth: 800px;\r\n");
      out.write("\tbackground-color: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#boardContent {\r\n");
      out.write("\theight: 250px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#boardContentTextArea {\r\n");
      out.write("\theight: 400px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#quickFilter {\r\n");
      out.write("\twidth: 25%;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<!-- Modal -->\r\n");
      out.write("<div id=\"jiModal2\">\r\n");
      out.write("\t<div id=\"jiContent2\">\r\n");
      out.write("\t\t<div class=\"modal-dialog\">\r\n");
      out.write("\t\t\t<form name=\"jiModifyForm\" id=\"jiModifyForm\"\r\n");
      out.write("\t\t\t\tenctype=\"multipart/form-data\">\r\n");
      out.write("\t\t\t\t<div class=\"modal-header\"></div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"modal-content\">\r\n");
      out.write("\t\t\t\t\t제목 :<input name=\"boardTitle\" class=\"form-control\" required></input>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t글번호 : <input name=\"boardId\" class=\"form-control\" readonly required></input>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t<hr>\r\n");
      out.write("\t\t\t\t\t내용 :\r\n");
      out.write("\t\t\t\t\t<textarea name=\"boardContent\" class=\"form-control\"\r\n");
      out.write("\t\t\t\t\t\tid=\"boardContentTextArea\" required></textarea>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"modal-footer\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t<button type=\"button\" class=\"btn btn-primary\" onclick=\"jiModify()\">적용</button>\r\n");
      out.write("\t\t\t<button type=\"button\" class=\"btn btn-secondary\" onclick=\"jiClose2()\">닫기</button>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- Button trigger modal -->\r\n");
      out.write("<div class=\"col-auto\">\r\n");
      out.write("\t<div\r\n");
      out.write("\t\tclass=\"card-header py-3 no-bg bg-transparent d-flex align-items-center px-0 justify-content-between border-bottom flex-wrap\">\r\n");
      out.write("\t\t<h3 class=\"fw-bold mb-0\">사내공지 게시판</h3>\r\n");
      out.write("\t\t<div class=\"col-auto d-flex w-sm-100\">\r\n");
      out.write("\t\t\t");
      if (_jspx_meth_security_005fauthorize_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- Modal Modal Center-->\r\n");
      out.write("<div class=\"modal fade\" id=\"exampleModalCenter\" tabindex=\"-1\"\r\n");
      out.write("\taria-labelledby=\"exampleModalCenterTitle\" style=\"display: none;\"\r\n");
      out.write("\taria-hidden=\"true\">\r\n");
      out.write("\t<div class=\"modal-dialog modal-dialog-centered\">\r\n");
      out.write("\t\t<div class=\"modal-content\">\r\n");
      out.write("\t\t\t<div class=\"modal-header\">\r\n");
      out.write("\t\t\t\t<h5 class=\"modal-title\" id=\"exampleModalCenterTitle\">Modal\r\n");
      out.write("\t\t\t\t\ttitle</h5>\r\n");
      out.write("\t\t\t\t<button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"\r\n");
      out.write("\t\t\t\t\taria-label=\"Close\"></button>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"modal-body\">\r\n");
      out.write("\t\t\t\t<form action=\"\" method=\"post\">\r\n");
      out.write("\t\t\t\t\t<!-- 아이디, 비밀번호, 이름, 입력받기 -->\r\n");
      out.write("\t\t\t\t\t게시판 이름<br> <input type=\"text\" name=\"boardType\"><br>\r\n");
      out.write("\t\t\t\t\t<hr>\r\n");
      out.write("\t\t\t\t\t<div class=\"modal-footer\">\r\n");
      out.write("\t\t\t\t\t\t<button type=\"submit\" class=\"btn btn-primary\">전송</button>\r\n");
      out.write("\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\"\r\n");
      out.write("\t\t\t\t\t\t\tdata-bs-dismiss=\"modal\">Close</button>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</form>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("<!-- 등록 모달 -->\r\n");
      out.write("<div class=\"modal\" id=\"jiinsertModal\">\r\n");
      out.write("\t<div class=\"modal-dialog\">\r\n");
      out.write("\t\t<div class=\"modal-content\" id=\"jiinsertContent\">\r\n");
      out.write("\t\t\t<div class=\"card mb-3\">\r\n");
      out.write("\t\t\t\t<div\r\n");
      out.write("\t\t\t\t\tclass=\"card-header py-3 d-flex justify-content-between bg-transparent border-bottom-0\">\r\n");
      out.write("\t\t\t\t\t<h6 class=\"mb-0 fw-bold \">글등록</h6>\r\n");
      out.write("\t\t\t\t\t<hr>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"card-body\">\r\n");
      out.write("\t\t\t\t\t<form onsubmit=\"handleSubmit(event)\" novalidate=\"novalidate\">\r\n");
      out.write("\t\t\t\t\t\t");
      if (_jspx_meth_security_005fcsrfInput_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\t\t\t\t\t\t<div class=\"row g-3 align-items-center\">\r\n");
      out.write("\t\t\t\t\t\t\t<br>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"col-md-12\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<span id=\"fail\"></span>\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<label class=\"form-label\">제목</label> <input type=\"text\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tname=\"boardTitle\" onchange=\"handleChange(event)\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tclass=\"form-control\" required>\r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"col-md-12\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<label class=\"form-label\">내용</label>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<textarea class=\"form-control\" name=\"boardContent\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tonchange=\"handleChange(event)\" rows=\"5\" cols=\"30\" required></textarea>\r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"modal-footer\">\r\n");
      out.write("\t\t\t\t\t\t\t<button type=\"submit\" class=\"btn btn-primary\">등록</button>\r\n");
      out.write("\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\"\r\n");
      out.write("\t\t\t\t\t\t\t\tonclick=\"jiinsertClose()\">닫기</button>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</form>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("<!-- ===================================================================================================================================== -->\r\n");
      out.write("<!-- 상세조회 모달 -->\r\n");
      out.write("<div class=\"modal\" id=\"coNoSelectModal\">\r\n");
      out.write("\t<div class=\"modal-dialog\">\r\n");
      out.write("\t\t<div class=\"modal-content card mb-3\" id=\"selectContent\">\r\n");
      out.write("\t\t\t<div\r\n");
      out.write("\t\t\t\tclass=\"card-header py-3 d-flex justify-content-between bg-transparent border-bottom-0\">\r\n");
      out.write("\t\t\t\t<h6 class=\"myModal-title mb-0 fw-bold \"></h6>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"card-body\">\r\n");
      out.write("\t\t\t\t<div class=\"row g-3 align-items-center\">\r\n");
      out.write("\t\t\t\t\t<div class=\"col-md-12\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t\t\t\t\t<label>글제목</label> <input type=\"text\" id=\"boardTitle\"\r\n");
      out.write("\t\t\t\t\t\t\t\tname=\"boardTitle\" class=\"form-control\" disabled> <input\r\n");
      out.write("\t\t\t\t\t\t\t\ttype=\"hidden\" id=\"noticeBoardWriteId\" name=\"noticeBoardWriteId\"\r\n");
      out.write("\t\t\t\t\t\t\t\tclass=\"form-control\">\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t\t\t\t<label>게시글번호</label> <input type=\"text\" id=\"boardId\"\r\n");
      out.write("\t\t\t\t\t\t\tname=\"boardId\" class=\"form-control\" disabled> <input\r\n");
      out.write("\t\t\t\t\t\t\ttype=\"hidden\" id=\"noticeBoardWriteId\" name=\"noticeBoardWriteId\"\r\n");
      out.write("\t\t\t\t\t\t\tclass=\"form-control\">\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"col-md-12\">\r\n");
      out.write("\t\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t\t\t\t<label>분류</label> <input type=\"text\" id=\"category\" name=\"category\"\r\n");
      out.write("\t\t\t\t\t\t\tclass=\"form-control\" value=\"사내공지\" disabled>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"col-md-12\">\r\n");
      out.write("\t\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t\t\t\t<label>작성자</label> <input type=\"text\" id=\"boardWriter\"\r\n");
      out.write("\t\t\t\t\t\t\tname=\"boardWriter\" class=\"form-control\" disabled>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"col-md-12\">\r\n");
      out.write("\t\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t\t\t\t<label>작성일자</label> <input type=\"text\" id=\"boardWriteDate\"\r\n");
      out.write("\t\t\t\t\t\t\tname=\"boardWriteDate\" class=\"form-control\" disabled>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"col-md-12\">\r\n");
      out.write("\t\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t\t\t\t<label>조회수</label> <input type=\"text\" id=\"boardCount\"\r\n");
      out.write("\t\t\t\t\t\t\tname=\"boardCount\" class=\"form-control\" disabled>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"col-md-12\">\r\n");
      out.write("\t\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t\t\t\t<label>내용</label><br>\r\n");
      out.write("\t\t\t\t\t\t<textarea id=\"boardContent\" name=\"boardContent\"\r\n");
      out.write("\t\t\t\t\t\t\tclass=\"form-control\" rows=\"5\" cols=\"30\" disabled></textarea>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"col-md-12\">\r\n");
      out.write("\t\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t\t\t\t<label>첨부파일</label>\r\n");
      out.write("\t\t\t\t\t\t<div id=\"files\"></div>\r\n");
      out.write("\t\t\t\t\t\t<span id=\"files2\"></span>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<div class=\"modal-footer\">\r\n");
      out.write("\t\t\t\t");
      if (_jspx_meth_security_005fauthorize_005f1(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\"\r\n");
      out.write("\t\t\t\t\tonclick=\"coNoSeModalClose()\">닫기</button>\r\n");
      out.write("\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("<br>\r\n");
      out.write("<br>\r\n");
      out.write("\r\n");
      out.write("<input type=\"text\" class=\"form-control\" oninput=\"onQuickFilterChanged()\"\r\n");
      out.write("\tid=\"quickFilter\" placeholder=\"검색...\" />\r\n");
      out.write("<br>\r\n");
      out.write("<div id=\"myGrid\" style=\"height: 500px; width: 100%;\"\r\n");
      out.write("\tclass=\"ag-theme-alpine\"></div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("        //스프링 security CSRF를  설정하면 아래 토큰 값을 get이외의 방식에는 전송해야 한당\r\n");
      out.write("          function onQuickFilterChanged() {\r\n");
      out.write("\r\n");
      out.write("            gridOptions.api.setQuickFilter(document.getElementById('quickFilter').value);\r\n");
      out.write("\r\n");
      out.write("          }\r\n");
      out.write("\r\n");
      out.write("\t    const header = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${_csrf.headerName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\r\n");
      out.write("  \t\tconst token =  '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${_csrf.token}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\r\n");
      out.write("\r\n");
      out.write("        let fail   = document.querySelector(\"#fail\");\r\n");
      out.write("\r\n");
      out.write("        const JIModal = document.querySelector(\"#jiModal\");\r\n");
      out.write("\r\n");
      out.write("        const JIModal2 = document.querySelector(\"#jiModal2\");\r\n");
      out.write("\r\n");
      out.write("        const JIInsModal = document.querySelector(\"#jiinsertModal\");\r\n");
      out.write("\r\n");
      out.write("    \tconst coNoSelectModal = document.querySelector(\"#coNoSelectModal\");\r\n");
      out.write("\r\n");
      out.write("        const jiClose = () =>{\r\n");
      out.write("            JIModal.style.display=\"none\"; // 안 보이겡\r\n");
      out.write("            location.href=location.href;\r\n");
      out.write("        }\r\n");
      out.write("        const jiClose2 = () =>{\r\n");
      out.write("            JIModal2.style.display=\"none\"; // 안 보이겡\r\n");
      out.write("        }\r\n");
      out.write("    \tconst coNoSeModalOpen = () => {\r\n");
      out.write("    \t\tcoNoSelectModal.style.display = \"block\";\r\n");
      out.write("    \t}\r\n");
      out.write("    \tconst coNoSeModalClose = () => {\r\n");
      out.write("    \t\tcoNoSelectModal.style.display = \"none\";    // 안보이게\r\n");
      out.write("    \t\tfgetData();\r\n");
      out.write("    \t}\r\n");
      out.write("\r\n");
      out.write("\t\t// 수정 모달\r\n");
      out.write("        const openJiModal2 = () =>{\r\n");
      out.write("           JIModal2.style.display=\"block\";\r\n");
      out.write("\r\n");
      out.write("         $(\"#jiContent2\").find(\"[name=boardTitle]\").val( $(coNoSelectModal).find(\"#boardTitle\").val() );\r\n");
      out.write("         $(\"#jiContent2\").find(\"[name=boardId]\").val( $(coNoSelectModal).find(\"#boardId\").val() );\r\n");
      out.write("         $(\"#jiContent2\").find(\"[name=boardContent]\").val( $(coNoSelectModal).find(\"#boardContent\").val() );\r\n");
      out.write("\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\tlet modiformdata = function(contentType, form){\r\n");
      out.write("   \t\tlet data = {};\r\n");
      out.write("   \t\t$('#jiModifyForm').find(\":input[name]\").each(function(index, input){\r\n");
      out.write("   \t\t\tlet propertyName = this.name;\r\n");
      out.write("   \t\t\tlet propertyValue = $(this).val();\r\n");
      out.write("   \t\t\tdata[propertyName] = propertyValue;\r\n");
      out.write("   \t\t});\r\n");
      out.write("   \t\tif(contentType.indexOf(\"json\") >= 0)\r\n");
      out.write("   \t\t\tdata = JSON.stringify(data);\t// marshalling\r\n");
      out.write("   \t\tconsole.log(data);\r\n");
      out.write("   \t\treturn data;\r\n");
      out.write("   \t\t}\r\n");
      out.write("\r\n");
      out.write("        const jiModify = (e) =>{\r\n");
      out.write("        \tconsole.log(\"체킁2: {}\",\"체킁2\");\r\n");
      out.write("\r\n");
      out.write("//     \t\t\te.preventDefault();\r\n");
      out.write("    \t\t\tlet form = this;\r\n");
      out.write("\r\n");
      out.write("            $.ajax({\r\n");
      out.write("                url : '/ourmine/boardCoNotice/boardCoNoticView',\r\n");
      out.write("                data : modiformdata('json', form),   // data : {\"bonum\" : reply.bonum},\r\n");
      out.write("                contentType : \"application/json;charset=utf-8\",\r\n");
      out.write("                type : 'post',\r\n");
      out.write("                dataType : 'json',  //   받아온 값에 JSON.parse\r\n");
      out.write("                beforeSend : function(xhr){  // 헤더에 값 세팅, 항상 요따구로 씀\r\n");
      out.write("                    xhr.setRequestHeader(header, token);\r\n");
      out.write("                },\r\n");
      out.write("                success : function(res){\r\n");
      out.write("                    console.log(\"check: \", res);\r\n");
      out.write("                    jiClose2();\r\n");
      out.write("                    coNoSeModalClose();\r\n");
      out.write("                    location.href=location.href;\r\n");
      out.write("                },\r\n");
      out.write("                error : function(xhr){\r\n");
      out.write("                    alert(\"상태 : \", \"실패\");\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        const jiinsertClose = () =>{\r\n");
      out.write("           $('#jiinsertModal').modal('hide'); // 안 보이겡\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 삭제모달\r\n");
      out.write("        const jiDelete = (boIdData) => {\r\n");
      out.write("           console.log(\"boardId : {}\", boIdData )\r\n");
      out.write("                 $.ajax({\r\n");
      out.write("                     url : '/ourmine/boardCoNotice/boardCoNoticDelete',\r\n");
      out.write("                     data : JSON.stringify(boIdData),   // data : {\"bonum\" : reply.bonum},\r\n");
      out.write("                     contentType : \"application/json;charset=utf-8\",\r\n");
      out.write("                     type : 'post',\r\n");
      out.write("                     dataType : 'json',  //   받아온 값에 JSON.parse\r\n");
      out.write("                     beforeSend : function(xhr){  // 헤더에 값 세팅, 항상 요따구로 씀\r\n");
      out.write("                         xhr.setRequestHeader(header, token);\r\n");
      out.write("                     },\r\n");
      out.write("                     success : function(res){\r\n");
      out.write("                         console.log(\"check: \", res);\r\n");
      out.write("                         coNoSeModalClose();\r\n");
      out.write("                         location.href=location.href;\r\n");
      out.write("                     },\r\n");
      out.write("                     error : function(xhr){\r\n");
      out.write("//                          alert(\"상태 : \" + xhr.status);\r\n");
      out.write("                     }\r\n");
      out.write("\r\n");
      out.write("                });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        const boardHitUpdate = (boardIdParam) =>{\r\n");
      out.write("        \tconsole.log(\"boardIdParam:{}\",boardIdParam)\r\n");
      out.write("            $.ajax({\r\n");
      out.write("                url : '/ourmine/boardCoNotice/boardCoNoHitUpdate',\r\n");
      out.write("                data : JSON.stringify(boardIdParam),   // data : {\"bonum\" : reply.bonum},\r\n");
      out.write("                contentType : \"application/json;charset=utf-8\",\r\n");
      out.write("                type : 'post',\r\n");
      out.write("                dataType : 'json',  //   받아온 값에 JSON.parse\r\n");
      out.write("                beforeSend : function(xhr){  // 헤더에 값 세팅, 항상 요따구로 씀\r\n");
      out.write("                    xhr.setRequestHeader(header, token);\r\n");
      out.write("                },\r\n");
      out.write("                success : function(res){\r\n");
      out.write("                    console.log(\"check: \", res);\r\n");
      out.write("                },\r\n");
      out.write("                error : function(xhr){\r\n");
      out.write("//                     alert(\"상태 : \" + xhr.status);\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("           });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        const gridDiv = document.querySelector(\"#myGrid\");\r\n");
      out.write("\r\n");
      out.write("                const fgetData = () => {   // 데이터 가져오는 비동기처리\r\n");
      out.write("                    // gridOptions.api. 대부분의 유용한 메소드가 여기에 있다\r\n");
      out.write("                    const xhr = new XMLHttpRequest();\r\n");
      out.write("                    xhr.open(\"GET\",\"/ourmine/boardCoNotice/boardCoNoticListJson\", true);\r\n");
      out.write("                    xhr.onreadystatechange = () => {\r\n");
      out.write("                        if (xhr.readyState == 4 && xhr.status == 200) {\r\n");
      out.write("//                             console.log(JSON.parse(xhr.responseText));\r\n");
      out.write("                            console.log(\"responseText : \", xhr.responseText);\r\n");
      out.write("                            gridOptions.rowData = JSON.parse(xhr.responseText);\r\n");
      out.write("                            //gridOptions.api.setRowData(JSON.parse(xhr.responseText));\r\n");
      out.write("                            document.getElementById('myGrid').innerHTML=\"\";\r\n");
      out.write("                            new agGrid.Grid(gridDiv, gridOptions);\r\n");
      out.write("\r\n");
      out.write("                        }\r\n");
      out.write("                    }\r\n");
      out.write("                    xhr.send();\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("                const columnDefs = [\r\n");
      out.write("                    { field: \"boardId\", headerName: \"게시글번호\" , cellStyle: {textAlign: 'center'}, maxWidth: 190 },\r\n");
      out.write("                    { field: \"boardWriter\", headerName: \"작성자\" , cellStyle: {textAlign: 'center'}, maxWidth: 200 },\r\n");
      out.write("                    { field: \"boardTitle\", headerName: \"제목\" , cellStyle: {textAlign: 'left'}, minWidth: 200 },\r\n");
      out.write("                    { field: \"boardCount\", headerName: \"조회수\" , cellStyle: {textAlign: 'center'}, maxWidth: 200 },\r\n");
      out.write("                    { field: \"boardWriteDate\", headerName: \"작성일자\" , cellStyle: {textAlign: 'center'}, maxWidth: 200 },\r\n");
      out.write("                    { field: \"boardModifyDate\", headerName: \"수정일자\" , cellStyle: {textAlign: 'center'}, maxWidth: 200 }\r\n");
      out.write("                ];\r\n");
      out.write("\r\n");
      out.write("                // specify the data\r\n");
      out.write("                // const rowData = [];\r\n");
      out.write("\r\n");
      out.write("                // let the grid know which columns and what data to use\r\n");
      out.write("                const gridOptions = {\r\n");
      out.write("                    defaultColDef: {    // 일일이 컬럼에 정의하지 않고 한번에 기본 옵션 설정!\r\n");
      out.write("                        sortable: true,\r\n");
      out.write("                        filter: true,\r\n");
      out.write("                        resizable: true,\r\n");
      out.write("                        editable: false,\r\n");
      out.write("                        setDataValue : true\r\n");
      out.write("                    },\r\n");
      out.write("                    columnDefs: columnDefs,\r\n");
      out.write("                    //row1Data: rowData,\r\n");
      out.write("                    pagination: true,\r\n");
      out.write("                    paginationAutoPageSize: true,\r\n");
      out.write("                    onGridReady: function (event) {\t\t// 열 자동 조절 기능\r\n");
      out.write("                        event.api.sizeColumnsToFit();\r\n");
      out.write("                    },\r\n");
      out.write("                    onCellClicked: params => { // example event handler\r\n");
      out.write("                        console.log('cell was clicked', params.data);\r\n");
      out.write("\t                    let files2 = document.querySelector('#files2');\r\n");
      out.write("\r\n");
      out.write("                        let boardIdParam = params.data.boardId;\r\n");
      out.write("\t                    axios.get(`/ourmine/boardCoNotice/boardCoFile/${boardIdParam}`, {headers:headers})\r\n");
      out.write("\t\t                    .then(resp => {\r\n");
      out.write("\t\t\t                    files2.innerHTML = '';\r\n");
      out.write("\t\t\t                    console.log(\"resp.data =\" ,resp.data);\r\n");
      out.write("\t\t\t                    let axiosData = resp.data;\r\n");
      out.write("\t\t\t                    console.log(\"엑시오스 데이터\",axiosData);\r\n");
      out.write("\t\t\t                    files2.innerHTML += axiosData.files.map(item => item.original !== null ?  `<a href=\"/ourmine/uploadAAA/${item.uuid}\" download=\"${item.original}\">${item.original}<a><br>` : `<a>파일없음</a>`).join('');\r\n");
      out.write("\t\t                    });\r\n");
      out.write("\r\n");
      out.write("\t                    boardIdParam = JSON.stringify(boardIdParam);\r\n");
      out.write("                    \tboardHitUpdate(boardIdParam);\r\n");
      out.write("\r\n");
      out.write("                    \tlet boardVO = params.data;\r\n");
      out.write("                    \tboNo = (boardVO.boardCount);\r\n");
      out.write("                    \tconsole.log(\"boNo1\",boNo)\r\n");
      out.write("\r\n");
      out.write("                    \tboNo = boNo + 1 ;\r\n");
      out.write("                    \tconsole.log(\"boNo2\",boNo)\r\n");
      out.write("\r\n");
      out.write("                        $(\"#boardTitle\").val(boardVO.boardTitle);\r\n");
      out.write("                        $(\"#boardId\").val(boardVO.boardId);\r\n");
      out.write("                        $(\"#boardWriter\").val(boardVO.boardWriter);\r\n");
      out.write("                        $(\"#boardWriteDate\").val(boardVO.boardWriteDate);\r\n");
      out.write("                        $(\"#boardCount\").val(boNo);\r\n");
      out.write("                        $(\"#boardContent\").val(boardVO.boardContent);\r\n");
      out.write("\r\n");
      out.write("                        coNoSelectModal.style.display=\"block\";\r\n");
      out.write("\r\n");
      out.write("                        let boIdData = params.data.boardId;\r\n");
      out.write("                        console.log(\"boIdData:{}\",boIdData)\r\n");
      out.write("                        $('#JIDelete').on('click', function(){\r\n");
      out.write("                           jiDelete(boIdData);\r\n");
      out.write("                        });\r\n");
      out.write("\r\n");
      out.write("              }\r\n");
      out.write("            //paginationPageSize:8,\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        // setup the grid after the page has finished loading\r\n");
      out.write("        headers['Content-Type'] = 'application/json'\r\n");
      out.write("\t    headers['accept'] = 'application/json'\r\n");
      out.write("\r\n");
      out.write("//         fgetData();  // 요기 있는게 그리 좋진 않지만, 가독성을 위해성 , 나중에 꺼내깅\r\n");
      out.write("        document.addEventListener('DOMContentLoaded', () => {\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        const board  = {\r\n");
      out.write("              boardTitle : '',\r\n");
      out.write("              boardContent : ''\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        const handleChange = (e) => {\r\n");
      out.write("           const {name,value} = e.target;\r\n");
      out.write("           add(name,value);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        const add = (name,value) => {\r\n");
      out.write("           board[name] = value;\r\n");
      out.write("           console.log(name,value)\r\n");
      out.write("           console.log(board)\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        const handleSubmit = (e) => {\r\n");
      out.write("\r\n");
      out.write("            e.preventDefault();\r\n");
      out.write("            fetch('/ourmine/boardCoNotice/boardCoNoticForm',{\r\n");
      out.write("                method : 'POST',\r\n");
      out.write("                headers : headers,\r\n");
      out.write("                body : JSON.stringify(board)\r\n");
      out.write("            }).then(resp => resp.json())\r\n");
      out.write("            .then(data => {\r\n");
      out.write("               console.log(data);\r\n");
      out.write("               if(data > 0){\r\n");
      out.write("                  jiinsertClose();\r\n");
      out.write("                  fgetData();\r\n");
      out.write("                  formReset();\r\n");
      out.write("               }else{\r\n");
      out.write("                  fail.innerHTML = '실패^^'\r\n");
      out.write("                  fail.style.color = 'red';\r\n");
      out.write("               }\r\n");
      out.write("            })\r\n");
      out.write("\r\n");
      out.write("        }\r\n");
      out.write("        const formReset = () =>{\r\n");
      out.write("            $('form').each(function() {\r\n");
      out.write("                this.reset();\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        fgetData();\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    </script>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_security_005fauthorize_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  security:authorize
    org.springframework.security.taglibs.authz.JspAuthorizeTag _jspx_th_security_005fauthorize_005f0 = (org.springframework.security.taglibs.authz.JspAuthorizeTag) _005fjspx_005ftagPool_005fsecurity_005fauthorize_0026_005faccess.get(org.springframework.security.taglibs.authz.JspAuthorizeTag.class);
    boolean _jspx_th_security_005fauthorize_005f0_reused = false;
    try {
      _jspx_th_security_005fauthorize_005f0.setPageContext(_jspx_page_context);
      _jspx_th_security_005fauthorize_005f0.setParent(null);
      // /WEB-INF/jsp/noticeboard/boardCoNoticList.jsp(121,3) name = access type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_security_005fauthorize_005f0.setAccess("hasRole('MANAGER')");
      int _jspx_eval_security_005fauthorize_005f0 = _jspx_th_security_005fauthorize_005f0.doStartTag();
      if (_jspx_eval_security_005fauthorize_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        out.write("\r\n");
        out.write("\t\t\t\t<button type=\"button\" class=\"btn btn-dark btn-set-task w-sm-100 m-1\"\r\n");
        out.write("\t\t\t\t\tid=\"boardAddBtn\" data-bs-toggle=\"modal\"\r\n");
        out.write("\t\t\t\t\tdata-bs-target=\"#jiinsertModal\">\r\n");
        out.write("\t\t\t\t\t<i class=\"icofont-plus-circle me-2 fs-6\"></i> 글추가\r\n");
        out.write("\t\t\t\t</button>\r\n");
        out.write("\t\t\t");
      }
      if (_jspx_th_security_005fauthorize_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fsecurity_005fauthorize_0026_005faccess.reuse(_jspx_th_security_005fauthorize_005f0);
      _jspx_th_security_005fauthorize_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_security_005fauthorize_005f0, _jsp_getInstanceManager(), _jspx_th_security_005fauthorize_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_security_005fcsrfInput_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  security:csrfInput
    org.springframework.security.taglibs.csrf.CsrfInputTag _jspx_th_security_005fcsrfInput_005f0 = (org.springframework.security.taglibs.csrf.CsrfInputTag) _005fjspx_005ftagPool_005fsecurity_005fcsrfInput_005fnobody.get(org.springframework.security.taglibs.csrf.CsrfInputTag.class);
    boolean _jspx_th_security_005fcsrfInput_005f0_reused = false;
    try {
      _jspx_th_security_005fcsrfInput_005f0.setPageContext(_jspx_page_context);
      _jspx_th_security_005fcsrfInput_005f0.setParent(null);
      int _jspx_eval_security_005fcsrfInput_005f0 = _jspx_th_security_005fcsrfInput_005f0.doStartTag();
      if (_jspx_th_security_005fcsrfInput_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fsecurity_005fcsrfInput_005fnobody.reuse(_jspx_th_security_005fcsrfInput_005f0);
      _jspx_th_security_005fcsrfInput_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_security_005fcsrfInput_005f0, _jsp_getInstanceManager(), _jspx_th_security_005fcsrfInput_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_security_005fauthorize_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  security:authorize
    org.springframework.security.taglibs.authz.JspAuthorizeTag _jspx_th_security_005fauthorize_005f1 = (org.springframework.security.taglibs.authz.JspAuthorizeTag) _005fjspx_005ftagPool_005fsecurity_005fauthorize_0026_005faccess.get(org.springframework.security.taglibs.authz.JspAuthorizeTag.class);
    boolean _jspx_th_security_005fauthorize_005f1_reused = false;
    try {
      _jspx_th_security_005fauthorize_005f1.setPageContext(_jspx_page_context);
      _jspx_th_security_005fauthorize_005f1.setParent(null);
      // /WEB-INF/jsp/noticeboard/boardCoNoticList.jsp(268,4) name = access type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_security_005fauthorize_005f1.setAccess("hasRole('MANAGER')");
      int _jspx_eval_security_005fauthorize_005f1 = _jspx_th_security_005fauthorize_005f1.doStartTag();
      if (_jspx_eval_security_005fauthorize_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        out.write("\r\n");
        out.write("\t\t\t\t\t<button type=\"button\" class=\"btn btn-primary\"\r\n");
        out.write("\t\t\t\t\t\tonclick=\"openJiModal2()\">수정</button>\r\n");
        out.write("\t\t\t\t\t<button type=\"button\" class=\"btn btn-primary\" id=\"JIDelete\">삭제</button>\r\n");
        out.write("\t\t\t\t");
      }
      if (_jspx_th_security_005fauthorize_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fsecurity_005fauthorize_0026_005faccess.reuse(_jspx_th_security_005fauthorize_005f1);
      _jspx_th_security_005fauthorize_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_security_005fauthorize_005f1, _jsp_getInstanceManager(), _jspx_th_security_005fauthorize_005f1_reused);
    }
    return false;
  }
}
