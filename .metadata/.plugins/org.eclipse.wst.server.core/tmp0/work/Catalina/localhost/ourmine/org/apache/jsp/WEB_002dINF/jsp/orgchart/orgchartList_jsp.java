/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2023-06-07 09:16:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.orgchart;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class orgchartList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("jar:file:/E:/A_TeachingMaterial/05_JSP_Spring/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ourmine/WEB-INF/lib/spring-security-taglibs-5.7.8.jar!/META-INF/security.tld", Long.valueOf(1681713972000L));
    _jspx_dependants.put("/WEB-INF/lib/spring-security-taglibs-5.7.8.jar", Long.valueOf(1683020361417L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1679567181629L));
    _jspx_dependants.put("jar:file:/E:/A_TeachingMaterial/05_JSP_Spring/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ourmine/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("    .grid-container {\r\n");
      out.write("        display: grid;\r\n");
      out.write("        grid-template-columns: 1fr 300px;\r\n");
      out.write("        grid-template-areas: \"main  main right\"\r\n");
      out.write("                                \"main main  right\"\r\n");
      out.write("    ;\r\n");
      out.write("        height: 100vh;\r\n");
      out.write("        align-items: center; /* 이 부분을 추가합니다 */\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .grid-main {\r\n");
      out.write("        grid-area: main;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .grid-right {\r\n");
      out.write("        grid-area: right;\r\n");
      out.write("    }\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write(" <button type=\"button\" class=\"btn btn-dark btn-set-task w-sm-100\" data-bs-toggle=\"modal\" data-bs-target=\"#tickadd\"><i class=\"icofont-plus-circle me-2 fs-6\"></i>부서 추가</button>\r\n");
      out.write(" <button type=\"button\" class=\"btn btn-dark btn-set-task w-sm-100\" data-bs-toggle=\"modal\" data-bs-target=\"#tickaddDelete\"><i class=\"icofont-minus-circle me-2 fs-6\"></i>부서 삭제</button>\r\n");
      out.write(" <button type=\"button\" class=\"btn btn-dark btn-set-task w-sm-100\" data-bs-toggle=\"modal\" data-bs-target=\"#tickaddUpdate\"><i class=\"icofont-exchange me-2 fs-6\"></i>부서 수정</button>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!--    ========================================================    -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"grid-container\">\r\n");
      out.write("    <div id=\"chart_div\" class=\"grid-main\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <!--조직도를 클릭시 나올 네비게이션바 -->\r\n");
      out.write("    <div class=\"gird-right\" style=\"display: none\">\r\n");
      out.write("        <div\r\n");
      out.write("                class=\"card card-chat border-right border-top-0 border-bottom-0  w380 grid-right\">\r\n");
      out.write("            <div class=\"px-4 py-3 py-md-4\">\r\n");
      out.write("                <div class=\"input-group mb-3\" style=\"display: flex; justify-content: right\">\r\n");
      out.write("                    <button type=\"button\" class=\"btn btn-secondary navBtnCancel\" data-bs-dismiss=\"modal\">닫기</button>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <div class=\"nav nav-pills justify-content-between text-center\"\r\n");
      out.write("                     role=\"tablist\">\r\n");
      out.write("                    <a class=\"flex-fill rounded border-0 nav-link active\" data-bs-toggle=\"tab\" href=\"#chat-recent\" role=\"tab\" aria-selected=\"true\">부서인원</a>\r\n");
      out.write("                    <a class=\"flex-fill rounded border-0 nav-link\" data-bs-toggle=\"tab\" href=\"#chat-contact\" role=\"tab\" aria-selected=\"false\">직원 추가</a>\r\n");
      out.write("                    <a class=\"flex-fill rounded border-0 nav-link\" data-bs-toggle=\"tab\" href=\"#chat-groups\" role=\"tab\" aria-selected=\"false\">상급 부서 수정</a>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <div class=\"tab-content border-top\">\r\n");
      out.write("                <div class=\"tab-pane fade show active\" id=\"chat-recent\"\r\n");
      out.write("                     role=\"tabpanel\">\r\n");
      out.write("                    <ul\r\n");
      out.write("                            class=\"list-unstyled list-group list-group-custom list-group-flush mb-0 orgMemberList\">\r\n");
      out.write("                    </ul>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"tab-pane fade\" id=\"chat-groups\" role=\"tabpanel\">\r\n");
      out.write("                    <ul class=\"list-unstyled list-group list-group-custom list-group-flush mb-0\">\r\n");
      out.write("                        <select class=\"form-select orgSenior\">\r\n");
      out.write("\r\n");
      out.write("                        </select>\r\n");
      out.write("                    </ul>\r\n");
      out.write("                    <div style=\"display: flex; justify-content: right\">\r\n");
      out.write("                        <br>\r\n");
      out.write("                        <br>\r\n");
      out.write("                    <button type=\"button\" class=\"btn btn-dark btn-set-task w-sm-100 seniorOrgInsert\" data-bs-toggle=\"modal\" data-bs-target=\"#\">상급 부서 수정</button>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"tab-pane fade\" id=\"chat-contact\" role=\"tabpanel\">\r\n");
      out.write("                    <ul class=\"list-unstyled list-group list-group-custom list-group-flush mb-0 memberCheckList\">\r\n");
      out.write("\r\n");
      out.write("                    </ul>\r\n");
      out.write("                    <div style=\"display: flex; justify-content: center;\">\r\n");
      out.write("\r\n");
      out.write("                        <ul class=\"pagination\">\r\n");
      out.write("                            <li class=\"page-item\" id=\"previousPage\"><a class=\"page-link\" href=\"#\">이전</a></li>\r\n");
      out.write("                            <li class=\"page-item\" id=\"nextPage\"><a class=\"page-link\" href=\"#\">다음</a></li>\r\n");
      out.write("                        </ul>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div style=\"display: flex; justify-content: right\">\r\n");
      out.write("                    <button type=\"button\" class=\"btn btn-dark btn-set-task w-sm-100 memberOrgInsert\" data-bs-toggle=\"modal\" data-bs-target=\"#\">인원 추가</button>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!--부서추가 -->\r\n");
      out.write("<form class=\"addInsertForm\">\r\n");
      out.write("<div class=\"modal fade\" id=\"tickadd\" tabindex=\"-1\"  aria-hidden=\"true\">\r\n");
      out.write("    <div class=\"modal-dialog modal-dialog-centered modal-md modal-dialog-scrollable\">\r\n");
      out.write("        <div class=\"modal-content\">\r\n");
      out.write("            <div class=\"modal-header\">\r\n");
      out.write("                <h5 class=\"modal-title  fw-bold\" id=\"leaveaddLabel\"> 부서 추가</h5>\r\n");
      out.write("                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"modal-body\">\r\n");
      out.write("                <div class=\"mb-3\">\r\n");
      out.write("                    <label for=\"sub\" class=\"form-label\">부서이름</label>\r\n");
      out.write("                    <input type=\"text\" class=\"form-control orgAddInput\" id=\"sub\">\r\n");
      out.write("                    <span id=\"textCheck\"></span>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <div class=\"mb-3\">\r\n");
      out.write("                    <label  class=\"form-label\">상위 부서 선택</label>\r\n");
      out.write("                    <select class=\"form-select orgInsertSelect\">\r\n");
      out.write("\r\n");
      out.write("                    </select>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"modal-footer\">\r\n");
      out.write("                <button type=\"button\" class=\"btn btn-secondary addBtnCancel\" data-bs-dismiss=\"modal\">취소</button>\r\n");
      out.write("                <button type=\"submit\" class=\"btn btn-primary\">만들기</button>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("<!--부서삭제 -->\r\n");
      out.write("<form class=\"addDeleteForm\">\r\n");
      out.write("    <div class=\"modal fade\" id=\"tickaddDelete\" tabindex=\"-1\"  aria-hidden=\"true\">\r\n");
      out.write("        <div class=\"modal-dialog modal-dialog-centered modal-md modal-dialog-scrollable\">\r\n");
      out.write("            <div class=\"modal-content\">\r\n");
      out.write("                <div class=\"modal-header\">\r\n");
      out.write("                    <h5 class=\"modal-title  fw-bold\" id=\"leaveaddLabelDelete\"> 부서 삭제</h5>\r\n");
      out.write("                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"modal-body\">\r\n");
      out.write("                    <div class=\"mb-3\">\r\n");
      out.write("                        <label  class=\"form-label\">부서 선택</label>\r\n");
      out.write("                        <select class=\"form-select orgDeleteSelect\">\r\n");
      out.write("\r\n");
      out.write("                        </select>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"modal-footer\">\r\n");
      out.write("                    <button type=\"button\" class=\"btn btn-secondary deleteBtnCancel\" data-bs-dismiss=\"modal\">취소</button>\r\n");
      out.write("                    <button type=\"submit\" class=\"btn btn-primary\">삭제하기</button>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!--부서수정 -->\r\n");
      out.write("<form class=\"addUpdateForm\">\r\n");
      out.write("    <div class=\"modal fade\" id=\"tickaddUpdate\" tabindex=\"-1\"  aria-hidden=\"true\">\r\n");
      out.write("        <div class=\"modal-dialog modal-dialog-centered modal-md modal-dialog-scrollable\">\r\n");
      out.write("            <div class=\"modal-content\">\r\n");
      out.write("                <div class=\"modal-header\">\r\n");
      out.write("                    <h5 class=\"modal-title  fw-bold\" id=\"leaveaddUpdate\">부서 수정</h5>\r\n");
      out.write("                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"modal-body\">\r\n");
      out.write("                    <div class=\"mb-3\">\r\n");
      out.write("                        <label  class=\"form-label\"> 부서 선택</label>\r\n");
      out.write("                        <select class=\"form-select orgUpdateSelect\">\r\n");
      out.write("\r\n");
      out.write("                        </select>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"mb-3\">\r\n");
      out.write("                        <label for=\"sub\" class=\"form-label\">수정하실 부서이름</label>\r\n");
      out.write("                        <input type=\"text\" class=\"form-control orgUpdateInput\" >\r\n");
      out.write("                        <span id=\"textCheckUpdate\"></span>\r\n");
      out.write("                    </div>\r\n");
      out.write("\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"modal-footer\">\r\n");
      out.write("                    <button type=\"button\" class=\"btn btn-secondary updateBtnCancel\" data-bs-dismiss=\"modal\">취소</button>\r\n");
      out.write("                    <button type=\"submit\" class=\"btn btn-primary\">수정하기</button>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\tconst companyId = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${companyId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(";\r\n");
      out.write("\tlet subBtn = document.querySelector('.sub-btn');\r\n");
      out.write("\tlet subAdd = document.querySelector('.sub-add');\r\n");
      out.write("\tlet orgInsertSelect = document.querySelector('.orgInsertSelect'); // 설렉트 옵션\r\n");
      out.write("\tlet addInsertForm = document.querySelector('.addInsertForm'); // 부서추가버튼\r\n");
      out.write("\tlet orgAddInput = document.querySelector('.orgAddInput'); //\r\n");
      out.write("\tlet addBtnCancel = document.querySelector('.addBtnCancel'); // 부서추가 취소버튼\r\n");
      out.write("\tlet deleteBtnCancel = document.querySelector('.deleteBtnCancel'); // 부서삭제 취소버튼\r\n");
      out.write("\tlet orgMemberList = document.querySelector('.orgMemberList'); // 멤버리스트\r\n");
      out.write("\tlet addDeleteForm = document.querySelector('.addDeleteForm'); //\r\n");
      out.write("\tlet orgDeleteSelect = document.querySelector('.orgDeleteSelect'); //\r\n");
      out.write("\tlet updateBtnCancel = document.querySelector('.updateBtnCancel'); //\r\n");
      out.write("\tlet orgUpdateSelect = document.querySelector('.orgUpdateSelect'); //\r\n");
      out.write("\tlet addUpdateForm = document.querySelector('.addUpdateForm');\r\n");
      out.write("\tlet orgUpdateInput = document.querySelector('.orgUpdateInput');\r\n");
      out.write("\tlet memberCheckList = document.querySelector('.memberCheckList');\r\n");
      out.write("\tlet memberOrgInsert = document.querySelector('.memberOrgInsert');\r\n");
      out.write("    let gridRight = document.querySelector('.gird-right');\r\n");
      out.write("    let orgSenior = document.querySelector('.orgSenior');\r\n");
      out.write("    let seniorOrgInsert = document.querySelector('.seniorOrgInsert');\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\tlet modalElement = document.getElementById('tickadd'); // 부서추가 모달\r\n");
      out.write("\tlet modalElementUpdate = document.getElementById('tickaddUpdate'); // 부서수정 모달\r\n");
      out.write("\r\n");
      out.write("\tlet checkedMembers = [];\r\n");
      out.write("\r\n");
      out.write("\tlet orgIdMap = {};\r\n");
      out.write("\r\n");
      out.write("\tgoogle.charts.load('current', {packages: ['orgchart']});\r\n");
      out.write("\tgoogle.charts.setOnLoadCallback(drawChart)\r\n");
      out.write("\r\n");
      out.write("\tlet currentPage = 1; // 현재 페이지 번호\r\n");
      out.write("\tlet selectedOrgId = null; // 현재 선택된 조직의 ID\r\n");
      out.write("\tdocument.getElementById(\"nextPage\").addEventListener(\"click\", function() {\r\n");
      out.write("\t\tif (selectedOrgId !== null) { // 선택된 조직이 있는 경우에만\r\n");
      out.write("\t\t\tcurrentPage++; // 페이지 번호 증가\r\n");
      out.write("\t\t\tloadMemberList(currentPage, selectedOrgId); // 새로운 페이지 번호로 멤버 리스트 로드\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\tdocument.getElementById(\"previousPage\").addEventListener(\"click\", function() {\r\n");
      out.write("\t\tif (selectedOrgId !== null && currentPage > 1) { // 선택된 조직이 있고, 첫 페이지가 아닌 경우에만\r\n");
      out.write("\t\t\tcurrentPage--; // 페이지 번호 감소\r\n");
      out.write("\t\t\tloadMemberList(currentPage, selectedOrgId); // 새로운 페이지 번호로 멤버 리스트 로드\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\tasync function drawChart() {\r\n");
      out.write("\t\tlet orgData = [];\r\n");
      out.write("\t\tawait axios.get(`/ourmine/company/${companyId}/orgchart/orgchartListJson`, {headers: headers})\r\n");
      out.write("\t\t\t.then(resp => {\r\n");
      out.write("\t\t\t\torg = [...resp.data];\r\n");
      out.write("\t\t\t\tconsole.log(\"org = \", org);\r\n");
      out.write("\t\t\t\torgData = resp.data;\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\tlet data = new google.visualization.DataTable();\r\n");
      out.write("\t\tdata.addColumn('string', 'Name');\r\n");
      out.write("\t\tdata.addColumn('string', 'Manager');\r\n");
      out.write("\t\tdata.addColumn('string', 'ToolTip');\r\n");
      out.write("\r\n");
      out.write("\t\torgData.forEach((item) => {\r\n");
      out.write("\t\t\torgIdMap[item.orgchartId.toString()] = item.orgchartId;\r\n");
      out.write("\t\t\tdata.addRow([\r\n");
      out.write("\t\t\t\t{'v': item.orgchartId.toString(), 'f': item.departmentName.toString()},\r\n");
      out.write("\t\t\t\titem.seniorDepartmentId ? item.seniorDepartmentId.toString() : null,\r\n");
      out.write("\t\t\t\titem.departmentCreateDate.toString(),\r\n");
      out.write("\t\t\t]);\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\tlet chart = new google.visualization.OrgChart(document.getElementById('chart_div'));\r\n");
      out.write("\t\tchart.draw(data, {\r\n");
      out.write("\t\t\tallowHtml: true,\r\n");
      out.write("\t\t\tsize: 'large'\r\n");
      out.write("\t\t})\r\n");
      out.write("        await createOrgSelectOptionsAjax(); // 부서추가 부서삭제 의 셀렉트 옵션을 만들어줌\r\n");
      out.write("\t\tawait deleteOrg();\r\n");
      out.write("\t\tawait updateOrg();\r\n");
      out.write("\t\tawait memberInsert();\r\n");
      out.write("\t\tawait addModelClose();\r\n");
      out.write("\t\tawait updateModelClose();\r\n");
      out.write("\t\tawait navCancel();\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\tgoogle.visualization.events.addListener(chart, 'select',async () => {\r\n");
      out.write("\t\t\tlet selectedItem = chart.getSelection()[0];\r\n");
      out.write("\t\t\tif (selectedItem) {\r\n");
      out.write("\t\t\t\tlet orgId = data.getValue(selectedItem.row, 0);\r\n");
      out.write("\t\t\t\t gridRight.style.display = 'block'; // 오타 수정\r\n");
      out.write("\t\t\t\tselectedOrgId = orgIdMap[orgId]; // UI 상에서 누른 부서의 ID 값을 가져옴\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tawait loadMemberList(1, selectedOrgId);\r\n");
      out.write("\t\t\t\tcheckedMembers = [];\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction memberCheck(org){\r\n");
      out.write("\t\tlet memberCheckListInput = document.querySelectorAll('.memberCheckListInput');\r\n");
      out.write("\t\tmemberCheckListInput.forEach(item => {\r\n");
      out.write("\t\t\tlet memberId = item.getAttribute('data-memberid');\r\n");
      out.write("\t\t\tif (checkedMembers.find(member => member.memberId === memberId)) {\r\n");
      out.write("\t\t\t\titem.checked = true;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\titem.addEventListener('change', (e) => {\r\n");
      out.write("\t\t\t\tif (e.target.checked) {\r\n");
      out.write("\t\t\t\t\t// 객체를 배열에 추가\r\n");
      out.write("\t\t\t\t\tcheckedMembers.push({ memberId: memberId ,orgchartId : org});\r\n");
      out.write("\t\t\t\t\tconsole.log(\"추가배열\",checkedMembers);\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tcheckedMembers = checkedMembers.filter(member => member.memberId !== memberId);\r\n");
      out.write("\t\t\t\t\t\tconsole.log(\"삭제배열\",checkedMembers);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("            })\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("\tfunction memberInsert(){\r\n");
      out.write("\t\tmemberOrgInsert.addEventListener('click', () => {\r\n");
      out.write("\t\t\tconsole.log('클릭됏냐 = ',checkedMembers)\r\n");
      out.write("\t\t\taxios.post(`/ourmine/company/${companyId}/orgchart/orgchartMember`,checkedMembers,{headers:headers})\r\n");
      out.write("                .then(resp => {\r\n");
      out.write("\t\t\t\t\tlet data = resp.data;\r\n");
      out.write("\t                console.log(\"멤버 인설트 데이터\",data)\r\n");
      out.write("                    if(data > 0){\r\n");
      out.write("\t                    Swal.fire({\r\n");
      out.write("\t\t                    icon: 'success',\r\n");
      out.write("\t\t                    title: '부서가 배정되었습니다.',\r\n");
      out.write("\t\t                    confirmButtonText: '확인',\r\n");
      out.write("\t                    })\r\n");
      out.write("\t\t                gridRight.style.display = 'none'; // 오타 수정\r\n");
      out.write("\t                    drawChart();\r\n");
      out.write("                    }\r\n");
      out.write("                })\r\n");
      out.write("\t\t})\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\tfunction navCancel(){\r\n");
      out.write("\t\tdocument.querySelector('.navBtnCancel').addEventListener('click', () => {\r\n");
      out.write("\t\t\tgridRight.style.display = 'none'; // 오타 수정\r\n");
      out.write("        })\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\tseniorOrgInsert.addEventListener('click', () => {\r\n");
      out.write("\t\t\tlet senior = {\r\n");
      out.write("\t\t\t\tcompanyId : companyId,\r\n");
      out.write("\t\t\t\torgchartId : '',\r\n");
      out.write("\t\t\t\tseniorDepartmentId : '',\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tlet option = orgSenior.options[orgSenior.selectedIndex];\r\n");
      out.write("\t\t\tsenior.seniorDepartmentId = option.getAttribute('data-orgid');\r\n");
      out.write("\t\t\tsenior.orgchartId = selectedOrgId;\r\n");
      out.write("\t\t\tconsole.log(\"시니어 아이디\", senior)\r\n");
      out.write("\t\t\taxios.post(`/ourmine/company/${companyId}/orgchart/orgchartSeniorUpdate`,senior,{headers:headers})\r\n");
      out.write("\t\t\t\t.then(resp => {\r\n");
      out.write("\t\t\t\t\tlet data = resp.data;\r\n");
      out.write("\t\t\t\t\tconsole.log(\"시니어 업데이트 데이터\", data);\r\n");
      out.write("\t\t\t\t\tif(data > 0){\r\n");
      out.write("\t\t\t\t\t\tSwal.fire({\r\n");
      out.write("\t\t\t\t\t\t\ticon: 'success',\r\n");
      out.write("\t\t\t\t\t\t\ttitle: '상위 부서가 수정되었습니다..',\r\n");
      out.write("\t\t\t\t\t\t\tconfirmButtonText: '확인',\r\n");
      out.write("\t\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t\t\tgridRight.style.display = 'none'; // 오타 수정\r\n");
      out.write("\t\t\t\t\t\tdrawChart();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("        })\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t// 멤버 리스트를 로드하는 함수입니다.\r\n");
      out.write("\tasync function loadMemberList(page, orgId) {\r\n");
      out.write("\t\tconst memberListOrg = {orgchartId : orgId, companyId : companyId};\r\n");
      out.write("\t\tconsole.log(\"memberListOrg=\", memberListOrg);\r\n");
      out.write("\t\tawait axios.post(`/ourmine/company/${companyId}/orgchart/orgchartMemberListJson`, memberListOrg, {headers: headers})\r\n");
      out.write("\t\t\t.then(resp => {\r\n");
      out.write("\t\t\t\tlet data = resp.data;\r\n");
      out.write("\t\t\t\torgMemberList.innerHTML = createListMember(data);\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\tawait axios.get(`/ourmine/company/${companyId}/orgchart/orgchartSelectMemberList`, {\r\n");
      out.write("\t\t\tparams: {\r\n");
      out.write("\t\t\t\tpage: page,\r\n");
      out.write("\t\t\t\torgchartId: orgId,\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}, {headers:headers})\r\n");
      out.write("\t\t\t.then(resp => {\r\n");
      out.write("\t\t\t\tlet data = resp.data;\r\n");
      out.write("\t\t\t\tmemberCheckList.innerHTML = createMemberCheckList(data);\r\n");
      out.write("\t\t\t\tmemberCheck(orgId);\r\n");
      out.write("\t\t\t});\r\n");
      out.write("        await axios.post(`/ourmine/company/${companyId}/orgchart/orgchartSeniorList`,memberListOrg,{headers:headers})\r\n");
      out.write("            .then(resp => {\r\n");
      out.write("                let data = resp.data;\r\n");
      out.write("                orgSenior.innerHTML = createOrgSelectOptions(data);\r\n");
      out.write("            })\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\taddInsertForm.addEventListener('submit', handleAddOrgSubmit);\r\n");
      out.write("   async function handleAddOrgSubmit(e){\r\n");
      out.write("\r\n");
      out.write("\t\t\te.preventDefault();\r\n");
      out.write("\t\t\tif(orgAddInput.value.trim() === ''){\r\n");
      out.write("\t\t\t\tdocument.getElementById('textCheck').innerHTML = '부서 이름을 입력해주세요';\r\n");
      out.write("\t\t\t\tdocument.getElementById('textCheck').style.color = 'red';\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("            }\r\n");
      out.write("\t\t\tlet orgAddInputValue = orgAddInput.value;\r\n");
      out.write("\t\t\tconst org = {\r\n");
      out.write("                companyId : '',\r\n");
      out.write("\t\t\t\tdepartmentName : '',\r\n");
      out.write("\t\t\t\tseniorDepartmentId : '',\r\n");
      out.write("            }\r\n");
      out.write("\t\t    let option = orgInsertSelect.options[orgInsertSelect.selectedIndex];\r\n");
      out.write("\t\t    org.companyId = companyId;\r\n");
      out.write("\t\t    org.departmentName =  orgAddInputValue;\r\n");
      out.write("            if(!option.getAttribute('data-orgid')){\r\n");
      out.write("                org.seniorDepartmentId = null;\r\n");
      out.write("            }else{\r\n");
      out.write("                org.seniorDepartmentId = option.getAttribute('data-orgid')\r\n");
      out.write("            }\r\n");
      out.write("\t\t    console.log(\"추가 org =\",org);\r\n");
      out.write("\t\tawait axios.post(`/ourmine/company/${companyId}/orgchart/orgchartInsert`,org,{headers:headers})\r\n");
      out.write("                .then(resp => {\r\n");
      out.write("\t\t\t\t\tlet data = resp.data;\r\n");
      out.write("\t\t\t\t\tif(data > 0){\r\n");
      out.write("\t\t\t\t\t\taddBtnCancel.click();\r\n");
      out.write("\t\t\t\t\t\torgAddInput.value = '';\r\n");
      out.write("\t\t\t\t\t\tSwal.fire({\r\n");
      out.write("\t\t\t\t\t\t\ticon: 'success',\r\n");
      out.write("\t\t\t\t\t\t\ttitle: '부서가 생성되었습니다.',\r\n");
      out.write("\t\t\t\t\t\t\tconfirmButtonText: '확인',\r\n");
      out.write("\t\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t\t\tdrawChart();\r\n");
      out.write("                    }\r\n");
      out.write("                })\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\tasync function deleteOrg(){\r\n");
      out.write("\t\taddDeleteForm.addEventListener('submit', async (e) => {\r\n");
      out.write("\t\t\te.preventDefault();\r\n");
      out.write("\t\t\tconst org = {\r\n");
      out.write("\t\t\t\torgchartId : '',\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tlet option = orgDeleteSelect.options[orgDeleteSelect.selectedIndex];\r\n");
      out.write("\t\t\torg.orgchartId = option.getAttribute('data-orgid');\r\n");
      out.write("\t\t\tconsole.log(\"삭제 org =\",org);\r\n");
      out.write("\t\t\tawait axios.post(`/ourmine/company/${companyId}/orgchart/orgchartDelete`,org,{headers:headers})\r\n");
      out.write("\t\t\t\t.then(resp => {\r\n");
      out.write("\t\t\t\t\tlet data = resp.data;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif(data > 0){\r\n");
      out.write("\t\t\t\t\t\tdeleteBtnCancel.click();\r\n");
      out.write("\t\t\t\t\t\tSwal.fire({\r\n");
      out.write("\t\t\t\t\t\t\ticon: 'success',\r\n");
      out.write("\t\t\t\t\t\t\ttitle: '부서가 삭제되었습니다.',\r\n");
      out.write("\t\t\t\t\t\t\tconfirmButtonText: '확인',\r\n");
      out.write("\t\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t\t\tdrawChart();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("\t\t})\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\tasync function updateOrg(){\r\n");
      out.write("\t\taddUpdateForm.addEventListener('submit', async (e) => {\r\n");
      out.write("\t\t\te.preventDefault();\r\n");
      out.write("\t\t\tif(orgUpdateInput.value.trim() === ''){\r\n");
      out.write("\t\t\t\tdocument.getElementById('textCheckUpdate').innerHTML = '부서 이름을 입력해주세요';\r\n");
      out.write("\t\t\t\tdocument.getElementById('textCheckUpdate').style.color = 'red';\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tlet orgUpdateInputValue = orgUpdateInput.value;\r\n");
      out.write("\t\t\tconst org = {\r\n");
      out.write("\t\t\t\tcompanyId : '',\r\n");
      out.write("\t\t\t\tdepartmentName : '',\r\n");
      out.write("\t\t\t\torgchartId : '',\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tlet option = orgUpdateSelect.options[orgUpdateSelect.selectedIndex];\r\n");
      out.write("\t\t\torg.companyId = companyId;\r\n");
      out.write("\t\t\torg.departmentName =  orgUpdateInputValue;\r\n");
      out.write("\t\t\torg.orgchartId = option.getAttribute('data-orgid');\r\n");
      out.write("\t\t\tconsole.log(\"추가 org =\",org);\r\n");
      out.write("\t\t\tawait axios.post(`/ourmine/company/${companyId}/orgchart/orgchartUpdate`,org,{headers:headers})\r\n");
      out.write("\t\t\t\t.then(resp => {\r\n");
      out.write("\t\t\t\t\tlet data = resp.data;\r\n");
      out.write("\t\t\t\t\tif(data > 0){\r\n");
      out.write("\t\t\t\t\t\tupdateBtnCancel.click();\r\n");
      out.write("\t\t\t\t\t\torgUpdateInput.value = '';\r\n");
      out.write("\t\t\t\t\t\tSwal.fire({\r\n");
      out.write("\t\t\t\t\t\t\ticon: 'success',\r\n");
      out.write("\t\t\t\t\t\t\ttitle: '부서 이름이 변경 되었습니다.',\r\n");
      out.write("\t\t\t\t\t\t\tconfirmButtonText: '확인',\r\n");
      out.write("\t\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t\t\tdrawChart();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("\t\t})\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t// 추가 모달 닫기 누르면 부서 이름을 입력해주세요 이거 초기화 시켜주기\r\n");
      out.write("\tfunction addModelClose(){\r\n");
      out.write("\t\tmodalElement.addEventListener('hidden.bs.modal', () => {\r\n");
      out.write("\t\t\torgAddInput.value = '';\r\n");
      out.write("\t\t\tdocument.getElementById('textCheck').innerHTML = '';\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction updateModelClose(){\r\n");
      out.write("\t\tmodalElementUpdate.addEventListener('hidden.bs.modal', () => {\r\n");
      out.write("\t\t\torgUpdateInput.value = '';\r\n");
      out.write("\t\t\tdocument.getElementById('textCheckUpdate').innerHTML = '';\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction createOrgSelectOptionsAjax(){\r\n");
      out.write("\t\taxios.get(`/ourmine/company/${companyId}/orgchart/orgchartListJson`,{headers: headers})\r\n");
      out.write("\t\t\t.then(resp => {\r\n");
      out.write("\t\t\t\tlet data = resp.data;\r\n");
      out.write("\t\t\t\torgInsertSelect.innerHTML = createOrgSelectOptions(data);\r\n");
      out.write("\t\t\t\torgDeleteSelect.innerHTML = createOrgSelectOptions(data);\r\n");
      out.write("\t\t\t\torgUpdateSelect.innerHTML = createOrgSelectOptions(data);\r\n");
      out.write("\t\t\t})\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t// 부서 생성모달 select 옵션 html 만들어 주는 함수\r\n");
      out.write("\tfunction createOrgSelectOptions(data){\r\n");
      out.write("        let content = '';\r\n");
      out.write("\t\tdata.map(item => {\r\n");
      out.write("\t\t\tif(item.seniorDepartmentId === null){\r\n");
      out.write("\t\t\t\tconsole.log('최상위 부서 = ',item)\r\n");
      out.write("\t\t\t\tcontent += `<option selected data-orgid=${item.orgchartId}>${item.departmentName}</option>`\r\n");
      out.write("\t\t\t}else{\r\n");
      out.write("\t\t\t\tcontent += `<option data-orgid=${item.orgchartId}>${item.departmentName}</option>`\r\n");
      out.write("            }\r\n");
      out.write("        })\r\n");
      out.write("        return content;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\tfunction createListMember(item) {\r\n");
      out.write("\t\tlet content = '';\r\n");
      out.write("\t\tif(item.length ===0){\r\n");
      out.write("\t\t\tcontent +=   `<li class=\"list-group-item px-md-4 py-3 py-md-4\">\r\n");
      out.write("\t\t\t\t<a href=\"javascript:void(0);\" class=\"d-flex\">\r\n");
      out.write("\t\t\t\t\t<div class=\"flex-fill ms-3 text-truncate\">\r\n");
      out.write("\t\t\t\t\t\t<span class=\"text-muted\"> 부서에 인원이 등록되어 있지않습니다 !</span>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</a>\r\n");
      out.write("\t\t\t</li>`;\r\n");
      out.write("        }else{\r\n");
      out.write("\t\t\titem.map(user => {\r\n");
      out.write("\t\t\t\tcontent +=   `<li class=\"list-group-item px-md-4 py-3 py-md-4\">\r\n");
      out.write("\t\t\t\t<a href=\"javascript:void(0);\" class=\"d-flex\">\r\n");
      out.write("\t\t\t\t\t<img class=\"avatar rounded-circle\" src=\"${user.imageContents}\" alt=\"\">\r\n");
      out.write("\t\t\t\t\t<div class=\"flex-fill ms-3 text-truncate\">\r\n");
      out.write("\t\t\t\t\t\t<h6 class=\"d-flex justify-content-between mb-0\"><span>${user.memberName}</span> <small class=\"msg-time\">${user.commitDate}</small></h6>\r\n");
      out.write("\t\t\t\t\t\t<span class=\"text-muted\">${user.departmentName}</span>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</a>\r\n");
      out.write("\t\t\t</li>`;\r\n");
      out.write("\t\t\t})\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("\t\treturn content;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction createMemberCheckList(item) {\r\n");
      out.write("\t\tlet content = '';\r\n");
      out.write("\t\tif(item.length ===0){\r\n");
      out.write("\t\t\treturn ;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\titem.map(user => {\r\n");
      out.write("\t\t\tcontent +=  `        <li class=\"list-group-item px-md-4 py-3 py-md-4\">\r\n");
      out.write("                      <a href=\"javascript:void(0);\" class=\"d-flex\"> <img class=\"avatar rounded-circle\" src=\"${user.imageContents}\" alt=\"\">\r\n");
      out.write("                            <div class=\"flex-fill ms-3 text-truncate\">\r\n");
      out.write("                                <div class=\"d-flex justify-content-between mb-0\">\r\n");
      out.write("                                    <h6 class=\"mb-0\">${user.memberName}</h6>\r\n");
      out.write("                                    <div class=\"text-muted\">\r\n");
      out.write("                                        <input data-memberid=${user.memberId} class=\"memberCheckListInput\" type=\"checkbox\">\r\n");
      out.write("                                    </div>\r\n");
      out.write("                                </div>\r\n");
      out.write("                                <span class=\"text-muted\">${user.departmentName}</span>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </a>\r\n");
      out.write("                        </li>`\r\n");
      out.write("\t\t})\r\n");
      out.write("\t\treturn content;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
