/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2023-06-10 06:47:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.project.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class boardList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(6);
    _jspx_dependants.put("jar:file:/E:/A_TeachingMaterial/05_JSP_Spring/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ourmine/WEB-INF/lib/spring-security-taglibs-5.7.8.jar!/META-INF/security.tld", Long.valueOf(1681713972000L));
    _jspx_dependants.put("/WEB-INF/lib/spring-security-taglibs-5.7.8.jar", Long.valueOf(1683020361417L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1679567181629L));
    _jspx_dependants.put("jar:file:/E:/A_TeachingMaterial/05_JSP_Spring/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ourmine/WEB-INF/lib/spring-webmvc-5.3.6.jar!/META-INF/spring-form.tld", Long.valueOf(1618279800000L));
    _jspx_dependants.put("jar:file:/E:/A_TeachingMaterial/05_JSP_Spring/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ourmine/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/spring-webmvc-5.3.6.jar", Long.valueOf(1680657633229L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fsecurity_005fcsrfInput_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fsecurity_005fcsrfInput_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fsecurity_005fcsrfInput_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js\"></script>\r\n");
      out.write("\t\r\n");
      out.write("<style>\r\n");
      out.write("/* 그리드 헤더 색상 */\r\n");
      out.write(".ag-theme-alpine {\r\n");
      out.write("\t--ag-header-background-color: #484c7f;\r\n");
      out.write("\t--ag-header-foreground-color: #ffffff;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 그리드 내용 가운데 정렬 */\r\n");
      out.write(".ag-row .ag-cell {\r\n");
      out.write("\tdisplay: flex;\r\n");
      out.write("\tjustify-content: center;\r\n");
      out.write("\t/* align horizontal */\r\n");
      out.write("\talign-items: center;\r\n");
      out.write("\t/* align-content: center; */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".ag-header-cell-text {\r\n");
      out.write("\tmargin-left: 60px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#jiModal {\r\n");
      out.write("\tdisplay: block;\r\n");
      out.write("\tposition: fixed;\r\n");
      out.write("\tleft: 0px;\r\n");
      out.write("\ttop: 0px;\r\n");
      out.write("\twidth: 100vw;\r\n");
      out.write("\theight: 100vh;\r\n");
      out.write("\tbackground-color: rgba(0, 0, 0, 0.5);\r\n");
      out.write("\tcolor: black;\r\n");
      out.write("\tz-index: 99999999999; /* 상당히 큰값을 오디선가 다른 곳에 주었음! */\r\n");
      out.write("\tdisplay: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#jiModal2 {\r\n");
      out.write("\tdisplay: block;\r\n");
      out.write("\tposition: fixed;\r\n");
      out.write("\tleft: 0px;\r\n");
      out.write("\ttop: 0px;\r\n");
      out.write("\twidth: 100vw;\r\n");
      out.write("\theight: 100vh;\r\n");
      out.write("\tbackground-color: rgba(0, 0, 0, 0.5);\r\n");
      out.write("\tcolor: black;\r\n");
      out.write("\tz-index: 999999999999; /* 상당히 큰값을 오디선가 다른 곳에 주었음! */\r\n");
      out.write("\tdisplay: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#boTyDelModal {\r\n");
      out.write("\tdisplay: block;\r\n");
      out.write("\tposition: fixed;\r\n");
      out.write("\tleft: 0px;\r\n");
      out.write("\ttop: 0px;\r\n");
      out.write("\twidth: 100vw;\r\n");
      out.write("\theight: 100vh;\r\n");
      out.write("\tbackground-color: rgba(0, 0, 0, 0.5);\r\n");
      out.write("\tcolor: black;\r\n");
      out.write("\tz-index: 999999999999; /* 상당히 큰값을 오디선가 다른 곳에 주었음! */\r\n");
      out.write("\tdisplay: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#jiContent {\r\n");
      out.write("\tmargin: 1% auto;\r\n");
      out.write("\twidth: 800px;\r\n");
      out.write("\tbackground-color: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#jiContent2 {\r\n");
      out.write("\tmargin: 15% auto;\r\n");
      out.write("\twidth: 800px;\r\n");
      out.write("\tbackground-color: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#jiinsertContent {\r\n");
      out.write("\tmargin: 45% -30%;\r\n");
      out.write("\twidth: 800px;\r\n");
      out.write("\tbackground-color: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#boTyDelContent {\r\n");
      out.write("\tmargin: 15% auto;\r\n");
      out.write("\theight: 300px;\r\n");
      out.write("\twidth: 600px;\r\n");
      out.write("\tbackground-color: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#modifyForm {\r\n");
      out.write("\tdisplay: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".reply-box {\r\n");
      out.write("\twidth: 770px;\r\n");
      out.write("\tmargin-bottom: 12px;\r\n");
      out.write("\tmax-height: 260px;\r\n");
      out.write("\toverflow: auto;\r\n");
      out.write("\tposition: relative;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#textareaPart {\r\n");
      out.write("\theight: 160px;\r\n");
      out.write("\toverflow: auto;\r\n");
      out.write("  \tposition: relative;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#contModiArea{\r\n");
      out.write("\theight: 200px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#jiModifyForm{\r\n");
      out.write("\twidth: 770px;\r\n");
      out.write("\tmargin: auto;\r\n");
      out.write("}\r\n");
      out.write("#jiarea{\r\n");
      out.write("    max-width: 770px;\r\n");
      out.write("    margin: 1.75rem auto;\r\n");
      out.write("}\r\n");
      out.write("#quickFilter{\r\n");
      out.write("    margin: 1%;\r\n");
      out.write("\twidth: 25%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\tconst autoReply = () => {\r\n");
      out.write("\t\tvar replyInput = document.getElementById(\"replyContentVal\");\r\n");
      out.write("\t\treplyInput.value = \"참여하고 싶습니다~\";\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<!-- 리플 수정모달 -->\r\n");
      out.write("<form id=\"modifyForm\">\r\n");
      out.write("\t<textarea rows=\"5\" cols=\"20\" id=\"area\"></textarea>\r\n");
      out.write("\t<input type=\"button\" value=\"확인\" id=\"btnok\"> <input\r\n");
      out.write("\t\ttype=\"button\" value=\"취소\" id=\"btncancle\">\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("<!-- 상세조회 Modal -->\r\n");
      out.write("<div id=\"jiModal\">\r\n");
      out.write("\t<div id=\"jiContent\">\r\n");
      out.write("\t\t<div class=\"\">\r\n");
      out.write("\t\t\t<div class=\"modal-header\">\r\n");
      out.write("\t\t\t\t<h5 class=\"boardTitle\" id=\"boardTitle\"></h5>\r\n");
      out.write("\t\t\t\t<a id=\"boardTypeId1\" style=\"display: none\"></a>\r\n");
      out.write("\t\t\t\t<hr>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"card bg-light\">\r\n");
      out.write("\t\t\t\t<div class=\"card-body pt-1\">\r\n");
      out.write("\t\t\t\t\t<div class=\"modal-content\">\r\n");
      out.write("\t\t\t\t\t\t<table>\r\n");
      out.write("\t\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t<td>글번호</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t<td id=\"boardId\"></td>\r\n");
      out.write("\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t<td>작성자</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t<td id=\"boardWriter\"></td>\r\n");
      out.write("\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t<td>날짜</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t<td id=\"boardWriteDate\"></td>\r\n");
      out.write("\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t<td>조회수</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t<td id=\"boardCount\"></td>\r\n");
      out.write("\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t</table>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t<div class=\"form-control modal-content\" id=\"textareaPart\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"form-control\">\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"boardContentArea\" id=\"boardContent\"></div>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t<br>\r\n");
      out.write("\t\t\t\t\t<div>\r\n");
      out.write("\t\t\t\t\t\t<span>첨부파일</span><br> <span id=\"files2\"></span>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"modal-footer\">\r\n");
      out.write("\t\t\t<button type=\"button\" class=\"btn btn-primary\"\r\n");
      out.write("\t\t\t\tonclick=\"openJiModal2()\">수정</button>\r\n");
      out.write("\t\t\t<button type=\"button\" class=\"btn btn-primary\" id=\"JIDelete\">삭제</button>\r\n");
      out.write("\t\t\t<button type=\"button\" class=\"btn btn-secondary\" onclick=\"jiClose()\">닫기</button>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<!-- 댓글 입력상자 -->\r\n");
      out.write("\t\t<section class=\"mb-5\" id=\"reply\">\r\n");
      out.write("\t\t\t<div class=\"card bg-light\">\r\n");
      out.write("\t\t\t\t<div class=\"card-body\">\r\n");
      out.write("\t\t\t\t\t<button type=\"button\" class=\"btn\" style=\"color:gray; float: right;\" onclick=\"autoReply()\">자동완성</button>\r\n");
      out.write("\t\t\t\t\t<!-- Comment form-->\r\n");
      out.write("\t\t\t\t\t<form class=\"mb-4\" name=\"insertReplyForm\" id=\"insertReplyForm\"\r\n");
      out.write("\t\t\t\t\t\tenctype=\"multipart/form-data\">\r\n");
      out.write("\t\t\t\t\t\t<input id=\"boardId1\" name=\"boardId\" type=\"hidden\" /> <input\r\n");
      out.write("\t\t\t\t\t\t\tclass=\"form-control\" placeholder=\"댓글을 입력해 주세요!\"\r\n");
      out.write("\t\t\t\t\t\t\tname=\"replyContent\" id=\"replyContentVal\" style=\"width: 100%;\" />\r\n");
      out.write("\t\t\t\t\t\t<div id=\"janeError\" style=\"display:none;color:red\" >댓글을 입력해 주세요!</div>\r\n");
      out.write("\t\t\t\t\t</form>\r\n");
      out.write("\t\t\t\t\t<button type=\"button\"\r\n");
      out.write("\t\t\t\t\t\tclass=\"btn btn-outline-primary col-md-12 action\"\r\n");
      out.write("\t\t\t\t\t\tonclick=\"replyInsert()\">등록</button>\r\n");
      out.write("\t\t\t\t\t<br>\r\n");
      out.write("\t\t\t\t\t<br>\r\n");
      out.write("\t\t\t\t\t<!-- Single comment-->\r\n");
      out.write("\t\t\t\t\t<div class=\"reply-box\"></div>\r\n");
      out.write("\t\t\t\t\t<!-- 게시판 리스트 출력 -->\r\n");
      out.write("\t\t\t\t\t<br>\r\n");
      out.write("\t\t\t\t\t<br>\r\n");
      out.write("\t\t\t\t\t<!-- 페이지 리스트 출력 -->\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</section>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("<!-- 수정 Modal -->\r\n");
      out.write("<div id=\"jiModal2\">\r\n");
      out.write("\t<div id=\"jiContent2\">\r\n");
      out.write("\t\t<div class=\"jiarea\">\r\n");
      out.write("\t\t\t<form name=\"jiModifyForm\" id=\"jiModifyForm\"\r\n");
      out.write("\t\t\t\tenctype=\"multipart/form-data\">\r\n");
      out.write("\t\t\t\t<div class=\"modal-header\"></div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"modal-content\">\r\n");
      out.write("\t\t\t\t\t제목 :<input name=\"boardTitle\" class=\"form-control\" required></input>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t글번호 : <input name=\"boardId\" class=\"form-control\" readonly required></input>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t<hr>\r\n");
      out.write("\t\t\t\t\t내용 :\r\n");
      out.write("\t\t\t\t\t<textarea name=\"boardContent\" class=\"form-control\" id=\"contModiArea\" required></textarea>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<span id=\"files\"></span>\r\n");
      out.write("\t\t<div class=\"modal-footer\">\r\n");
      out.write("\t\t\t<button type=\"button\" class=\"btn btn-primary\" onclick=\"jiModify()\">적용</button>\r\n");
      out.write("\t\t\t<button type=\"button\" class=\"btn btn-secondary\" onclick=\"jiClose2()\">닫기</button>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("<!-- 게시판 타입 추가 모달 -->\r\n");
      out.write("<div class=\"modal fade\" id=\"exampleModalCenter\" tabindex=\"-1\"\r\n");
      out.write("\taria-labelledby=\"exampleModalCenterTitle\" style=\"display: none;\"\r\n");
      out.write("\taria-hidden=\"true\">\r\n");
      out.write("\t<div class=\"modal-dialog modal-dialog-centered\">\r\n");
      out.write("\t\t<div class=\"modal-content\">\r\n");
      out.write("\t\t\t<div class=\"modal-header\">\r\n");
      out.write("\t\t\t\t<h5 class=\"modal-title\" id=\"exampleModalCenterTitle\">게시판 추가</h5>\r\n");
      out.write("\t\t\t\t<button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"\r\n");
      out.write("\t\t\t\t\taria-label=\"Close\"></button>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"modal-body\">\r\n");
      out.write("\t\t\t\t<form method=\"post\" id=\"boTyInsForm\">\r\n");
      out.write("\t\t\t\t\t<!-- 아이디, 비밀번호, 이름, 입력받기 -->\r\n");
      out.write("\t\t\t\t\t게시판 이름<br> <input type=\"text\" name=\"boardType\"\r\n");
      out.write("\t\t\t\t\t\tid=\"boardTypeClean\"><br>\r\n");
      out.write("\t\t\t\t\t<hr>\r\n");
      out.write("\t\t\t\t\t<div class=\"modal-footer\">\r\n");
      out.write("\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-primary\"\r\n");
      out.write("\t\t\t\t\t\t\tonclick=\"boardTypeInsert(event)\">전송</button>\r\n");
      out.write("\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\"\r\n");
      out.write("\t\t\t\t\t\t\tdata-bs-dismiss=\"modal\">닫기</button>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</form>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("<!-- 게시판 타입 제거 모달 -->\r\n");
      out.write("<div id=\"boTyDelModal\">\r\n");
      out.write("\t<div id=\"boTyDelContent\">\r\n");
      out.write("\t\t<div class=\"card bg-light\">\r\n");
      out.write("\t\t\t<div class=\"card-body pt-4\">\r\n");
      out.write("\t\t\t\t<div>\r\n");
      out.write("\t\t\t\t\t<div class=\"modal-header\">\r\n");
      out.write("\t\t\t\t\t\t<h5>게시판종류 삭제</h5>\r\n");
      out.write("\t\t\t\t\t\t<hr>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t<div class=\"modal-body\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"modal-content\">\r\n");
      out.write("\t\t\t\t\t\t\t<br>\r\n");
      out.write("\t\t\t\t\t\t\t<h5 style=\"text-align: center;\">게시판종류</h5>\r\n");
      out.write("\t\t\t\t\t\t\t<br> <select name=\"boardTypeId\" id=\"boardTypeId\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<option value=\"0\" selected>선택</option>\r\n");
      out.write("\t\t\t\t\t\t\t</select> <br>\r\n");
      out.write("\t\t\t\t\t\t\t<br>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t<div class=\"modal-footer\">\r\n");
      out.write("\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-primary\"\r\n");
      out.write("\t\t\t\t\t\t\tonclick=\"boardTypeDel()\">삭제</button>\r\n");
      out.write("\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\"\r\n");
      out.write("\t\t\t\t\t\t\tonclick=\"BoTyDelModalClose()\">닫기</button>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("<!-- 등록 모달 -->\r\n");
      out.write("<div class=\"modal\" id=\"jiinsertModal\">\r\n");
      out.write("\t<div class=\"modal-dialog\">\r\n");
      out.write("\t\t<div class=\"modal-content\" id=\"jiinsertContent\">\r\n");
      out.write("\t\t\t<div class=\"card mb-3\">\r\n");
      out.write("\t\t\t\t<div\r\n");
      out.write("\t\t\t\t\tclass=\"card-header py-3 d-flex justify-content-between bg-transparent border-bottom-0\">\r\n");
      out.write("\t\t\t\t\t<h6 class=\"mb-0 fw-bold \">글등록</h6>\r\n");
      out.write("\t\t\t\t\t<hr>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"card-body\">\r\n");
      out.write("\t\t\t\t\t<form onsubmit=\"handleSubmit(event)\" novalidate=\"novalidate\"\r\n");
      out.write("\t\t\t\t\t\tid=\"insertjiModal\">\r\n");
      out.write("\t\t\t\t\t\t");
      if (_jspx_meth_security_005fcsrfInput_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\t\t\t\t\t\t<div class=\"row g-3 align-items-center\">\r\n");
      out.write("\t\t\t\t\t\t\t<div>\r\n");
      out.write("\t\t\t\t\t\t\t\t게시판종류<br> <select name=\"boardTypeId\" id=\"boardTypeId3\">\r\n");
      out.write("\t\t\t\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t\t\t\t\t<hr>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"col-md-12\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<span id=\"fail\"></span>\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<label class=\"form-label\">제목</label> <input type=\"text\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tname=\"boardTitle\" class=\"form-control\" id=\"boardTitleClear\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\trequired>\r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"col-md-12\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<label class=\"form-label\">내용</label>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<textarea class=\"form-control\" name=\"boardContent\" rows=\"5\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tcols=\"30\" id=\"boardContentClear\" required></textarea>\r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"col-md-12\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<input type=\"file\" multiple=\"multiple\" name=\"files\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tid=\"filesClean\" />\r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t<div id=\"fileListDiv\"></div>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t<br>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"modal-footer\">\r\n");
      out.write("\t\t\t\t\t\t\t<button type=\"button\" class=\"btn\" style=\"color:gray;\" onclick=\"autoBoard()\">자동완성</button>\r\n");
      out.write("\t\t\t\t\t\t\t<button type=\"submit\" class=\"btn btn-primary\" id=\"jiInsertBtn\">등록</button>\r\n");
      out.write("\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\"\r\n");
      out.write("\t\t\t\t\t\t\t\tonclick=\"jiinsertClose()\">닫기</button>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</form>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("<!-- 추가 버튼 -->\r\n");
      out.write("\r\n");
      out.write("<!-- main body area -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- Body: Body -->\r\n");
      out.write("<div class=\"body d-flex py-lg-3 py-md-2\">\r\n");
      out.write("\t<div class=\"container-xxl\">\r\n");
      out.write("\t\t<div class=\"row align-items-center\">\r\n");
      out.write("\t\t\t<div class=\"border-0 mb-4\">\r\n");
      out.write("\t\t\t\t<div class=\"card-header py-3 no-bg bg-transparent d-flex align-items-center px-0 justify-content-between border-bottom flex-wrap\">\r\n");
      out.write("\t\t\t\t\t<h3 class=\"fw-bold mb-0\">게시판</h3>\r\n");
      out.write("\t\t\t\t\t<div class=\"col-auto d-flex w-sm-100\">\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t<button type=\"button\"\r\n");
      out.write("\t\t\t\t\t\t\tclass=\"btn btn-dark btn-set-task w-sm-100 m-1\"\r\n");
      out.write("\t\t\t\t\t\t\tid=\"boardTypeDelBtn\">\r\n");
      out.write("\t\t\t\t\t\t\t<i class=\"icofont-minus-circle me-2 fs-6\"></i> 게시판 제거\r\n");
      out.write("\t\t\t\t\t\t</button>\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t<button type=\"button\"\r\n");
      out.write("\t\t\t\t\t\t\tclass=\"btn btn-dark btn-set-task w-sm-100 m-1\"\r\n");
      out.write("\t\t\t\t\t\t\tid=\"boardTypeAddBtn\" data-bs-toggle=\"modal\"\r\n");
      out.write("\t\t\t\t\t\t\tdata-bs-target=\"#exampleModalCenter\">\r\n");
      out.write("\t\t\t\t\t\t\t<i class=\"icofont-plus-circle me-2 fs-6\"></i> 게시판 추가\r\n");
      out.write("\t\t\t\t\t\t</button>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<br>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<div class=\"card-header py-3 no-bg bg-transparent d-flex align-items-center px-0 justify-content-between border-bottom flex-wrap\">\r\n");
      out.write("\t\t\t\t<input type=\"text\" class=\"form-control\"  oninput=\"onQuickFilterChanged()\"  id=\"quickFilter\"   placeholder=\"검색...\"/>\r\n");
      out.write("\t\t\t\t<div class=\"col-auto d-flex w-sm-100\">\r\n");
      out.write("\t\t\t\t\t<button type=\"button\"\r\n");
      out.write("\t\t\t\t\t\tclass=\"btn btn-dark btn-set-task w-sm-100 m-1 mx-3\" id=\"boardAddBtn\"\r\n");
      out.write("\t\t\t\t\t\tdata-bs-toggle=\"modal\" data-bs-target=\"#jiinsertModal\">\r\n");
      out.write("\t\t\t\t\t\t<i class=\"icofont-plus-circle me-2 fs-6\"></i> 글추가\r\n");
      out.write("\t\t\t\t\t</button>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<br>\r\n");
      out.write("\t\t\t<!-- ag-grid영역 -->\r\n");
      out.write("\t\t\t<br>\r\n");
      out.write("\t\t\t<div id=\"myGrid\" style=\"height: 600px; width: 100%;\" class=\"ag-theme-alpine\"></div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("\t\t//검색\r\n");
      out.write("\t\t function onQuickFilterChanged() {\r\n");
      out.write("\t\t    gridOptions.api.setQuickFilter(document.getElementById('quickFilter').value);\r\n");
      out.write("\t\t  }\r\n");
      out.write("        //스프링 security CSRF를  설정하면 아래 토큰 값을 get이외의 방식에는 전송해야 한당\r\n");
      out.write("\t    const header = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${_csrf.headerName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\r\n");
      out.write("  \t\tconst token =  '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${_csrf.token}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\r\n");
      out.write("\r\n");
      out.write("        let fail   = document.querySelector(\"#fail\");\r\n");
      out.write("\r\n");
      out.write("        const JIModal = document.querySelector(\"#jiModal\");\r\n");
      out.write("\r\n");
      out.write("        const JIModal2 = document.querySelector(\"#jiModal2\");\r\n");
      out.write("\r\n");
      out.write("        const JIInsModal = document.querySelector(\"#jiinsertModal\");\r\n");
      out.write("\r\n");
      out.write("        const BoTyDelModal = document.querySelector(\"#boTyDelModal\");\r\n");
      out.write("\r\n");
      out.write("        const jiClose = () =>{\r\n");
      out.write("        \tlet paramboty = document.querySelector(\"#jiModal #boardTypeId1\");\r\n");
      out.write("        \tlet param = paramboty.text;\r\n");
      out.write("        \tconsole.log(\"param{}:\",param);\r\n");
      out.write("            JIModal.style.display=\"none\"; // 안 보이겡\r\n");
      out.write("            fgetData(param);\r\n");
      out.write("        }\r\n");
      out.write("        const jiClose2 = () =>{\r\n");
      out.write("            JIModal2.style.display=\"none\"; // 안 보이겡\r\n");
      out.write("        }\r\n");
      out.write("        const BoTyDelModalClose = () =>{\r\n");
      out.write("        \tBoTyDelModal.style.display=\"none\"; // 안 보이겡\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("//\t\t 게시판 LIST\r\n");
      out.write("//\t\t bodynav로 이동\r\n");
      out.write("\t    const fgetData = (boardTypeNum) => {   // 데이터 가져오는 비동기처리\r\n");
      out.write("\t        // gridOptions.api. 대부분의 유용한 메소드가 여기에 있다\r\n");
      out.write("\t        const xhr = new XMLHttpRequest();\r\n");
      out.write("\t        xhr.open(\"GET\",\"/ourmine/company/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${companyId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/project/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projectId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/board/boardListJson?boardTypeId=\"+boardTypeNum, true);\r\n");
      out.write("\t        xhr.onreadystatechange = () => {\r\n");
      out.write("\t            if (xhr.readyState == 4 && xhr.status == 200) {\r\n");
      out.write("\t//                 console.log(JSON.parse(xhr.responseText));\r\n");
      out.write("\t                console.log(\"responseText : \", xhr.responseText);\r\n");
      out.write("\t                gridOptions.rowData = JSON.parse(xhr.responseText);\r\n");
      out.write("\t//                 gridOptions.api.setRowData(JSON.parse(xhr.responseText));\r\n");
      out.write("\t\t\t\t\tdocument.getElementById('myGrid').innerHTML=\"\";\r\n");
      out.write("\t                new agGrid.Grid(gridDiv, gridOptions);\r\n");
      out.write("\r\n");
      out.write("\t            }\r\n");
      out.write("\t        }\r\n");
      out.write("\t        xhr.send();\r\n");
      out.write("\t    }\r\n");
      out.write("\r\n");
      out.write("        // insert모달 게시판 종류 띄우기\r\n");
      out.write("        const botyDisp = document.querySelector(\"#boardTypeId\");\r\n");
      out.write("        const botyDisp3 = document.querySelector(\"#boardTypeId3\");\r\n");
      out.write("\t\tconsole.log(\"botyDisp3:{}\",botyDisp3)\r\n");
      out.write("\r\n");
      out.write("        const fboardList2 = function(resp){\r\n");
      out.write("        \tfor(let i=0; i<resp.length; i++){\r\n");
      out.write("        \t\tlet jOption = document.createElement(\"option\");\r\n");
      out.write("        \t\tjOption.value = `${resp[i].boardTypeId}`;\r\n");
      out.write("        \t\tjOption.innerHTML = `${resp[i].boardType}`;\r\n");
      out.write("        \t\tbotyDisp.appendChild(jOption);\r\n");
      out.write("        \t}\r\n");
      out.write("        }\r\n");
      out.write("        const fboardList3 = function(resp){\r\n");
      out.write("        \tfor(let i=0; i<resp.length; i++){\r\n");
      out.write("        \t\tlet jOption = document.createElement(\"option\");\r\n");
      out.write("        \t\tjOption.value = `${resp[i].boardTypeId}`;\r\n");
      out.write("        \t\tjOption.innerHTML = `${resp[i].boardType}`;\r\n");
      out.write("        \t\tbotyDisp3.appendChild(jOption);\r\n");
      out.write("        \t}\r\n");
      out.write("        }\r\n");
      out.write("\t\tconst boardTypeList2 = function(){\r\n");
      out.write("\t\t\tconsole.log(\"타입리스트체킁:{}\",\"체킁\");\r\n");
      out.write("\t        $.ajax({\r\n");
      out.write("\t          type:\"get\",\r\n");
      out.write("\t          url:\"/ourmine/company/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${companyId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/project/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projectId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/boardType/boardTypeList\",\r\n");
      out.write("\t          async:true,\r\n");
      out.write("\t          dataType:\"json\",\r\n");
      out.write("\t          success:function(resp){\r\n");
      out.write("// \t              console.log(\"결과확인\",resp);  // 요기 코드가 길어지면  별도 함수로 처리/ 그래야 가독성이 유지됨\r\n");
      out.write("\t              fboardList2(resp);\r\n");
      out.write("\t              fboardList3(resp);\r\n");
      out.write("\t          },\r\n");
      out.write("\t          error: function (request, status, error) {\r\n");
      out.write("\t              console.log(\"code: \" + request.status)\r\n");
      out.write("\t              console.log(\"message: \" + request.responseText)\r\n");
      out.write("\t              console.log(\"error: \" + error);\r\n");
      out.write("\t          }\r\n");
      out.write("\r\n");
      out.write("\t        })\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t// 게시글 수정 모달\r\n");
      out.write("        const openJiModal2 = () =>{\r\n");
      out.write("           JIModal2.style.display=\"block\";\r\n");
      out.write("\r\n");
      out.write("         let boardContVal =  $(JIModal).find(\"#boardContent\").html();\r\n");
      out.write("         let boardCont = boardContVal.replaceAll(/<br>/g, \"\\n\");\r\n");
      out.write("         console.log(\"boardCont:{}\",boardCont);\r\n");
      out.write("\r\n");
      out.write("         $(\"#jiContent2\").find(\"[name=boardTitle]\").val( $(JIModal).find(\"#boardTitle\").html() );\r\n");
      out.write("         $(\"#jiContent2\").find(\"[name=boardId]\").val( $(JIModal).find(\"#boardId\").html() );\r\n");
      out.write("         $(\"#jiContent2\").find(\"[name=boardContent]\").val( boardCont );\r\n");
      out.write("\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t// 게시글 수정\r\n");
      out.write("\t\tlet modiformdata = function(contentType, form){\r\n");
      out.write("\r\n");
      out.write("   \t\tlet data = {};\r\n");
      out.write("   \t\t$('#jiModifyForm').find(\":input[name]\").each(function(index, input){\r\n");
      out.write("   \t\t\tlet propertyName = this.name;\r\n");
      out.write("   \t\t\tlet propertyValue = $(this).val();\r\n");
      out.write("   \t\t\tdata[propertyName] = propertyValue;\r\n");
      out.write("   \t\t});\r\n");
      out.write("   \t\t$('#jiModifyForm').find(\"textarea[name]\").each(function(index, input){\r\n");
      out.write("   \t\t\tlet propertyName = this.name;\r\n");
      out.write("   \t\t\tlet contextText = $(this).val();\r\n");
      out.write("   \t\t\tlet propertyValue = contextText.replaceAll(\"\\n\", \"<br>\");\r\n");
      out.write("   \t\t\tdata[propertyName] = propertyValue;\r\n");
      out.write("   \t\t});\r\n");
      out.write("\r\n");
      out.write("   \t\tif(contentType.indexOf(\"json\") >= 0)\r\n");
      out.write("   \t\t\tdata = JSON.stringify(data);\t// marshalling\r\n");
      out.write("   \t\tconsole.log(data);\r\n");
      out.write("   \t\treturn data;\r\n");
      out.write("   \t\t}\r\n");
      out.write("\r\n");
      out.write("        const jiModify = (e) =>{\r\n");
      out.write("\r\n");
      out.write("        \tconsole.log(\"체킁2: {}\",\"체킁2\");\r\n");
      out.write("\r\n");
      out.write("            let btvid = document.querySelector(\"#boardTypeId1\");\r\n");
      out.write("        \tconsole.log(\"btvid: {}\", btvid);\r\n");
      out.write("\r\n");
      out.write("    \t\tlet btvidValue = btvid.text;\r\n");
      out.write("        \tconsole.log(\"btvidValue: {}\", btvidValue);\r\n");
      out.write("\r\n");
      out.write("//     \t\t\te.preventDefault();\r\n");
      out.write("    \t\t\tlet form = this;\r\n");
      out.write("\r\n");
      out.write("        \tlet contextText = $(\"#jiModifyForm [name=boardContent]\").val();\r\n");
      out.write("            console.log(\"contextText:{}\",contextText); // css 선택자\r\n");
      out.write("            let boardCont = contextText.replaceAll(\"\\n\", \"<br>\");\r\n");
      out.write("            console.log(\"boardCont:{}\",boardCont); // css 선택자\r\n");
      out.write("\r\n");
      out.write("            $.ajax({\r\n");
      out.write("                url : '/ourmine/company/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${companyId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/project/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projectId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/board/boardView',\r\n");
      out.write("                data : modiformdata('json', form),   // data : {\"bonum\" : reply.bonum},\r\n");
      out.write("                contentType : \"application/json;charset=utf-8\",\r\n");
      out.write("                type : 'post',\r\n");
      out.write("                dataType : 'json',  //   받아온 값에 JSON.parse\r\n");
      out.write("                beforeSend : function(xhr){  // 헤더에 값 세팅, 항상 요따구로 씀\r\n");
      out.write("                    xhr.setRequestHeader(header, token);\r\n");
      out.write("                },\r\n");
      out.write("                success : function(res){\r\n");
      out.write("                    console.log(\"check: \", res);\r\n");
      out.write("    \t\t\t\tSwal.fire({\r\n");
      out.write("    \t\t\t\t\ticon: 'success',\r\n");
      out.write("    \t\t\t\t\ttitle:'게시판 수정완료',\r\n");
      out.write("    \t\t\t\t\tshowConfirmButton: false,\r\n");
      out.write("    \t\t\t\t\ttimer: 1000\r\n");
      out.write("    \t\t\t\t});\r\n");
      out.write("                    jiClose2();\r\n");
      out.write("                    jiClose();\r\n");
      out.write("                    fgetData(btvidValue);\r\n");
      out.write("                },\r\n");
      out.write("                error : function(xhr){\r\n");
      out.write("                    alert(\"상태 : \", \"실패\");\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        const jiinsertClose = () =>{\r\n");
      out.write("           $('#jiinsertModal').modal('hide'); // 안 보이겡\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        const jiDelete = (boIdData) => {\r\n");
      out.write("            console.log(\"boardId : {}\", boIdData )\r\n");
      out.write("\r\n");
      out.write("            let btvid2 = document.querySelector(\"#boardTypeId1\");\r\n");
      out.write("        \tconsole.log(\"btvid: {}\", btvid2);\r\n");
      out.write("\r\n");
      out.write("    \t\tlet btvidValue2 = btvid2.text;\r\n");
      out.write("        \tconsole.log(\"btvidValue: {}\", btvidValue2);\r\n");
      out.write("\r\n");
      out.write("                 $.ajax({\r\n");
      out.write("                     url : '/ourmine/company/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${companyId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/project/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projectId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/board/boardDelete',\r\n");
      out.write("                     data : JSON.stringify(boIdData),   // data : {\"bonum\" : reply.bonum},\r\n");
      out.write("                     contentType : \"application/json;charset=utf-8\",\r\n");
      out.write("                     type : 'post',\r\n");
      out.write("                     dataType : 'json',  //   받아온 값에 JSON.parse\r\n");
      out.write("                     beforeSend : function(xhr){  // 헤더에 값 세팅, 항상 요따구로 씀\r\n");
      out.write("                         xhr.setRequestHeader(header, token);\r\n");
      out.write("                     },\r\n");
      out.write("                     success : function(res){\r\n");
      out.write("                         console.log(\"check: \", res);\r\n");
      out.write("         \t\t\t\tSwal.fire({\r\n");
      out.write("        \t\t\t\t\ticon: 'success',\r\n");
      out.write("        \t\t\t\t\ttitle:'게시판 삭제완료',\r\n");
      out.write("        \t\t\t\t\tshowConfirmButton: false,\r\n");
      out.write("        \t\t\t\t\ttimer: 1000\r\n");
      out.write("        \t\t\t\t});\r\n");
      out.write("                         jiClose();\r\n");
      out.write("                         fgetData(btvidValue2);\r\n");
      out.write("                     },\r\n");
      out.write("                     error : function(xhr){\r\n");
      out.write("//                          alert(\"상태 : \" + xhr.status);\r\n");
      out.write("                     }\r\n");
      out.write("\r\n");
      out.write("                });\r\n");
      out.write("        }\r\n");
      out.write("        const boardHitUpdate = (boardIdParam) =>{\r\n");
      out.write("        \tconsole.log(\"boardIdParam:{}\",boardIdParam)\r\n");
      out.write("            $.ajax({\r\n");
      out.write("                url : '/ourmine/company/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${companyId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/project/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projectId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/board/boardHitUpdate',\r\n");
      out.write("                data : JSON.stringify(boardIdParam),   // data : {\"bonum\" : reply.bonum},\r\n");
      out.write("                contentType : \"application/json;charset=utf-8\",\r\n");
      out.write("                type : 'post',\r\n");
      out.write("                dataType : 'json',  //   받아온 값에 JSON.parse\r\n");
      out.write("                beforeSend : function(xhr){  // 헤더에 값 세팅, 항상 요따구로 씀\r\n");
      out.write("                    xhr.setRequestHeader(header, token);\r\n");
      out.write("                },\r\n");
      out.write("                success : function(res){\r\n");
      out.write("                    console.log(\"check: \", res);\r\n");
      out.write("                },\r\n");
      out.write("                error : function(xhr){\r\n");
      out.write("//                     alert(\"상태 : \" + xhr.status);\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("           });\r\n");
      out.write("        }\r\n");
      out.write("        ///////////////////// 게시판종류 등록 ////////////////////\r\n");
      out.write("        const checkBoarTypeAleady = function(resp){\r\n");
      out.write("\r\n");
      out.write("        \tvar validationCheck = true;\r\n");
      out.write("\r\n");
      out.write("        \tfor(let i=0; i<resp.length; i++){\r\n");
      out.write("        \t\tif(resp[i].boardType == '00' || resp[i].boardType == alreadyInCheck){\r\n");
      out.write("        \t\t\tvalidationCheck = false;\r\n");
      out.write("        \t\t}\r\n");
      out.write("        \t}\r\n");
      out.write("\r\n");
      out.write("        \tif(!validationCheck){\r\n");
      out.write("        \t\talert(\"게시판명 중복\");\r\n");
      out.write("        \t}\r\n");
      out.write("        \treturn validationCheck;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        const boardTypeList3 = function(){\r\n");
      out.write("\t\t\tconsole.log(\"타입리스트체킁:{}\",\"체킁\");\r\n");
      out.write("\t\t\tvar validationCheck = true;\r\n");
      out.write("\t        $.ajax({\r\n");
      out.write("\t          type:\"get\",\r\n");
      out.write("\t          url:\"/ourmine/company/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${companyId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/project/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projectId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/boardType/boardTypeList\",\r\n");
      out.write("\t          async:false,\r\n");
      out.write("\t          dataType:\"json\",\r\n");
      out.write("\t          success:function(resp){\r\n");
      out.write("// \t              console.log(\"결과확인\",resp);  // 요기 코드가 길어지면  별도 함수로 처리/ 그래야 가독성이 유지됨\r\n");
      out.write("\t        \t  validationCheck = checkBoarTypeAleady(resp);\r\n");
      out.write("\t\t\t\t  \r\n");
      out.write("\t          },\r\n");
      out.write("\t          error: function (request, status, error) {\r\n");
      out.write("\t              console.log(\"code: \" + request.status)\r\n");
      out.write("\t              console.log(\"message: \" + request.responseText)\r\n");
      out.write("\t              console.log(\"error: \" + error);\r\n");
      out.write("\t          }\r\n");
      out.write("\r\n");
      out.write("\t        })\r\n");
      out.write("\r\n");
      out.write("\t        return validationCheck;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("        let boardTypeInsertForm = function(contentType, form){\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("       \t\tlet boTyInsdata = {};\r\n");
      out.write("       \t\t$('#boTyInsForm').find(\":input[name]\").each(function(index, input){\r\n");
      out.write("       \t\t\tlet propertyName = this.name;\r\n");
      out.write("       \t\t\tconsole.log(\"propertyName\");\r\n");
      out.write("       \t\t\tlet propertyValue = $(this).val();\r\n");
      out.write("       \t\t\tconsole.log(\"propertyValue\");\r\n");
      out.write("       \t\t\tboTyInsdata[propertyName] = propertyValue;\r\n");
      out.write("       \t\t});\r\n");
      out.write("       \t\tif(contentType.indexOf(\"json\") >= 0)\r\n");
      out.write("       \t\t\tboTyInsdata = JSON.stringify(boTyInsdata);\t// marshalling\r\n");
      out.write("       \t\tconsole.log(\"boTyInsdata:{}\",boTyInsdata);\r\n");
      out.write("       \t\treturn boTyInsdata;\r\n");
      out.write("       \t\t}\r\n");
      out.write("\r\n");
      out.write("        \tlet\talreadyInCheck = '00';\r\n");
      out.write("\r\n");
      out.write("            const boardTypeInsert = (e) =>{\r\n");
      out.write("            \te.preventDefault();\r\n");
      out.write("            \tlet boardTypeInsert = document.querySelector(\"#boardTypeClean\")\r\n");
      out.write("            \talreadyInCheck = boardTypeInsert.value;\r\n");
      out.write("            \tconsole.log(\"boardTypeInsert:{}\",boardTypeInsert);\r\n");
      out.write("            \tconsole.log(\"alreadyInCheck:{}\",alreadyInCheck);\r\n");
      out.write("            \tconsole.log(\"체킁:\",this);\r\n");
      out.write("        \t\tlet form = this;\r\n");
      out.write("\r\n");
      out.write("        \t\tvar validationCheck = boardTypeList3();\r\n");
      out.write("        \t\tif(!validationCheck) return;\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                $.ajax({\r\n");
      out.write("                    url : '/ourmine/company/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${companyId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/project/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projectId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/boardType/boardTypeForm',\r\n");
      out.write("                    data : boardTypeInsertForm('json', form),   // data : {\"bonum\" : reply.bonum},\r\n");
      out.write("                    contentType : \"application/json;charset=utf-8\",\r\n");
      out.write("                    type : 'post',\r\n");
      out.write("                    dataType : 'json',  //   받아온 값에 JSON.parse\r\n");
      out.write("                    beforeSend : function(xhr){  // 헤더에 값 세팅, 항상 요따구로 씀\r\n");
      out.write("                        xhr.setRequestHeader(header, token);\r\n");
      out.write("                    },\r\n");
      out.write("                    success : function(res){\r\n");
      out.write("                        console.log(\"check: \", res);\r\n");
      out.write("                        boardTypeInsert.value='';\r\n");
      out.write("                        Swal.fire({\r\n");
      out.write("                            icon: 'success',\r\n");
      out.write("                            title: '게시판종류 등록완료',\r\n");
      out.write("                            confirmButtonText: '확인',\r\n");
      out.write("                        }).then((result) => {\r\n");
      out.write("                            if (result.isConfirmed) {\r\n");
      out.write("                                location.reload();\r\n");
      out.write("                            }\r\n");
      out.write("                        })\r\n");
      out.write("                    },\r\n");
      out.write("                    error : function(xhr){\r\n");
      out.write("                        alert(\"상태 : \", \"실패\");\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            }\r\n");
      out.write("            //게시판 종류 삭제\r\n");
      out.write("            const boardTypeDel = () =>{\r\n");
      out.write("            \tlet boardType = document.querySelector(\"#boardTypeId\");\r\n");
      out.write("            \tlet boardTypeId = boardType.value;\r\n");
      out.write("            \tconsole.log(\"boardTypeId:{}\",boardTypeId);\r\n");
      out.write("                $.ajax({\r\n");
      out.write("                    url : '/ourmine/company/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${companyId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/project/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projectId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/boardType/boardTypeDelete',\r\n");
      out.write("                    data : JSON.stringify(boardTypeId),   // data : {\"bonum\" : reply.bonum},\r\n");
      out.write("                    contentType : \"application/json;charset=utf-8\",\r\n");
      out.write("                    type : 'post',\r\n");
      out.write("                    dataType : 'json',  //   받아온 값에 JSON.parse\r\n");
      out.write("                    beforeSend : function(xhr){  // 헤더에 값 세팅, 항상 요따구로 씀\r\n");
      out.write("                        xhr.setRequestHeader(header, token);\r\n");
      out.write("                    },\r\n");
      out.write("                    success : function(res){\r\n");
      out.write("                        console.log(\"check: \", res);\r\n");
      out.write("                        Swal.fire({\r\n");
      out.write("                            icon: 'success',\r\n");
      out.write("                            title: '게시판종류 삭제완료',\r\n");
      out.write("                            confirmButtonText: '확인',\r\n");
      out.write("                        }).then((result) => {\r\n");
      out.write("                            if (result.isConfirmed) {\r\n");
      out.write("                                location.reload();\r\n");
      out.write("                            }\r\n");
      out.write("                        })\r\n");
      out.write("                    },\r\n");
      out.write("                    error : function(xhr){\r\n");
      out.write("                        alert(\"상태 : \", \"실패\");\r\n");
      out.write("                    }\r\n");
      out.write("\r\n");
      out.write("                });\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("        ////////////////// 댓글 ///////////////////\r\n");
      out.write("\r\n");
      out.write("        // 댓글 목록\r\n");
      out.write("        const replyBox = document.querySelector(\".reply-box\");\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        const replyGetList =(boardIdParam)=>{\r\n");
      out.write("        \tconsole.log(\"replyboardId:{}\",boardIdParam);\r\n");
      out.write("         \tconsole.log(\"체킁4:\",replyBox);\r\n");
      out.write("         replyBox.innerHTML=\"\";\r\n");
      out.write("        \t$.ajax({\r\n");
      out.write("        \t  type:\"get\",\r\n");
      out.write("        \t  url:\"/ourmine/reply/boardReplyListJson?boardId=\"+ boardIdParam,\r\n");
      out.write("        \t  dataType:\"json\",\r\n");
      out.write("        \t  success:function(resp){\r\n");
      out.write("        \t      console.log(\"결과확인\",resp);  // 요기 코드가 길어지면  별도 함수로 처리/ 그래야 가독성이 유지됨\r\n");
      out.write("\t              \tfor(let i=0; i<resp.length; i++){\r\n");
      out.write("                     console.log(\"루핑구:\",i);\r\n");
      out.write("\t            \t\tlet replyList = document.createElement(\"div\");\r\n");
      out.write("\t            \t\treplyList.innerHTML = `작성자 : ${resp[i].replyWriter}               `;\r\n");
      out.write("\t            \t\treplyList.innerHTML += `작성일 : ${resp[i].replyWriteDate}<br>`;\r\n");
      out.write("\t            \t\treplyList.innerHTML += `<a name=\"boardId\" vid =\"${resp[i].boardId}\" /><br>`;\r\n");
      out.write("\t            \t\treplyList.innerHTML += `<textarea class=\"form-control\" name=\"replyContent\" vid =\"${resp[i].replyId}\">${resp[i].replyContent}</textarea>`;\r\n");
      out.write("\t            \t\treplyList.innerHTML += `\r\n");
      out.write("\t            \t\t<br>\r\n");
      out.write("\t            \t\t<p class=\"p2\">\r\n");
      out.write("\t    \t                <input type=\"button\" idx=\"${resp[i].replyId}\" vid =\"${resp[i].boardId}\" value=\"댓글수정\" name=\"r_modify\" class=\"r_modify_action\" >\r\n");
      out.write("\t    \t                <input type=\"button\" idx=\"${resp[i].replyId}\" vid =\"${resp[i].boardId}\" value=\"댓글삭제\" name=\"r_delete\" class=\"r_delete_action\" >\r\n");
      out.write("\t                 \t</p>`\r\n");
      out.write("\t            \t\treplyBox.appendChild(replyList);\r\n");
      out.write("\t            \t}\r\n");
      out.write("        \t  },\r\n");
      out.write("        \t  error: function (request, status, error) {\r\n");
      out.write("        \t      console.log(\"code: \" + request.status)\r\n");
      out.write("        \t      console.log(\"error: \" + error);\r\n");
      out.write("        \t  }\r\n");
      out.write("\r\n");
      out.write("        \t})\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        // =========== 그룹 채팅방 이름 공란에러메세지 ==============\r\n");
      out.write("\t\t$(\"#replyContentVal\").on(\"keyup\",function(){\r\n");
      out.write("\t\t\tif(this.value.trim().length){\r\n");
      out.write("\t\t\t\t$(\"#janeError\").css(\"display\",\"none\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t})\r\n");
      out.write("        \r\n");
      out.write("        // 댓글 등록\r\n");
      out.write("        let replyInsertFormdata = function(contentType, form){\r\n");
      out.write("       \t\tlet reInsdata = {};\r\n");
      out.write("\r\n");
      out.write("       \t\t$('#insertReplyForm').find(\":input[name]\").each(function(index, input){\r\n");
      out.write("       \t\t\tlet propertyName = this.name;\r\n");
      out.write("       \t\t\tconsole.log(\"propertyName\",propertyName);\r\n");
      out.write("       \t\t\tlet propertyValue = $(this).val();\r\n");
      out.write("       \t\t\tif(!propertyValue.trim()){\r\n");
      out.write("       \t\t\t\t$(\"#janeError\").css(\"display\",\"block\");\r\n");
      out.write("       \t\t\t\treturn;\r\n");
      out.write("       \t\t\t}\r\n");
      out.write("       \t\t\treInsdata[propertyName] = propertyValue;\r\n");
      out.write("       \t\t});\r\n");
      out.write("       \t\tif(contentType.indexOf(\"json\") >= 0)\r\n");
      out.write("       \t\t\treInsdata = JSON.stringify(reInsdata);\t// marshalling\r\n");
      out.write("       \t\tconsole.log(\"reInsdata:{}\",reInsdata);\r\n");
      out.write("       \t\treturn reInsdata;\r\n");
      out.write("       \t\t}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            const replyInsert = (e) =>{\r\n");
      out.write("            \tconsole.log(\"체킁:\",this);\r\n");
      out.write("        \t\tlet form = this;\r\n");
      out.write("        \t\tlet bvid = document.querySelector(\"#boardId1\");\r\n");
      out.write("        \t\tlet bvidValue = bvid.value;\r\n");
      out.write("            \tconsole.log(\"bvidValue: {}\", bvidValue);\r\n");
      out.write("            \tlet inputarea = $('#insertReplyForm').find(\"input.form-control\");\r\n");
      out.write("            \tconsole.log(\"inputarea: {}\", inputarea);\r\n");
      out.write("\r\n");
      out.write("                $.ajax({\r\n");
      out.write("                    url : '/ourmine/reply/replyInsert',\r\n");
      out.write("                    data : replyInsertFormdata('json', form),   // data : {\"bonum\" : reply.bonum},\r\n");
      out.write("                    contentType : \"application/json;charset=utf-8\",\r\n");
      out.write("                    type : 'post',\r\n");
      out.write("                    dataType : 'json',  //   받아온 값에 JSON.parse\r\n");
      out.write("                    beforeSend : function(xhr){  // 헤더에 값 세팅, 항상 요따구로 씀\r\n");
      out.write("                        xhr.setRequestHeader(header, token);\r\n");
      out.write("                    },\r\n");
      out.write("                    success : function(res){\r\n");
      out.write("                        console.log(\"check: \", res);\r\n");
      out.write("                        console.log(\"p\",inputarea[0]);\r\n");
      out.write("                        \r\n");
      out.write("                        inputarea.val('');\r\n");
      out.write("                        replyGetList(bvidValue);\r\n");
      out.write("                    },\r\n");
      out.write("                    error : function(xhr){\r\n");
      out.write("//                         alert(\"상태 : \", \"실패\");\r\n");
      out.write("                    }\r\n");
      out.write("\r\n");
      out.write("                });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            }\r\n");
      out.write("        // 댓글 삭제\r\n");
      out.write("        $(function(){\r\n");
      out.write("\t        $(document).on('click', '.r_delete_action', function(){\r\n");
      out.write("\t    \t\tvidx = $(this).attr('idx');\r\n");
      out.write("\t    \t\tbvid = $(this).attr('vid');\r\n");
      out.write("\t        \tconsole.log(\"체킁: vidx: {}\",vidx);\r\n");
      out.write("\t        \tconsole.log(\"체킁: bvid: {}\",bvid);\r\n");
      out.write("\t//     \t\t\te.preventDefault();\r\n");
      out.write("\r\n");
      out.write("\t            $.ajax({\r\n");
      out.write("\t                url : '/ourmine/reply/replyDelete',\r\n");
      out.write("\t                data : vidx,   // data : {\"bonum\" : reply.bonum},\r\n");
      out.write("\t                contentType : \"application/json;charset=utf-8\",\r\n");
      out.write("\t                type : 'post',\r\n");
      out.write("\t                dataType : 'text',  //   받아온 값에 JSON.parse\r\n");
      out.write("\t                beforeSend : function(xhr){  // 헤더에 값 세팅, 항상 요따구로 씀\r\n");
      out.write("\t                    xhr.setRequestHeader(header, token);\r\n");
      out.write("\t                },\r\n");
      out.write("\t                success : function(res){\r\n");
      out.write("\t                    console.log(\"check: \", res);\r\n");
      out.write("                        Swal.fire({\r\n");
      out.write("                            icon: 'success',\r\n");
      out.write("                            title: '댓글 삭제완료',\r\n");
      out.write("                            confirmButtonText: '확인',\r\n");
      out.write("                        }).then((result) => {\r\n");
      out.write("                            if (result.isConfirmed) {\r\n");
      out.write("                            \treplyGetList(bvid);\r\n");
      out.write("                            }\r\n");
      out.write("                        })\r\n");
      out.write("\t                },\r\n");
      out.write("\t                error : function(xhr){\r\n");
      out.write("\t//                     alert(\"상태 : \", \"실패\");\r\n");
      out.write("\t                }\r\n");
      out.write("\r\n");
      out.write("\t            });\r\n");
      out.write("\t        });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t        $(document).on('click', '.r_modify_action', function(){\r\n");
      out.write("            //console.log(\"체킁:\",this);\r\n");
      out.write("            let $txtArea = $(this).closest(\"div\").find(\"textarea\");\r\n");
      out.write("            let bvid = document.querySelector(\"#boardId1\");\r\n");
      out.write("    \t\tlet bvidValue = bvid.value;\r\n");
      out.write("        \tconsole.log(\"bvidValue: {}\", bvidValue);\r\n");
      out.write("\r\n");
      out.write("            //console.log(\"체킁2 : \" , $txtArea.val());\r\n");
      out.write("            //console.log(\"체킁3 :\", $txtArea.attr(\"vid\"));\r\n");
      out.write("\r\n");
      out.write("            let boardReplyVO = {\r\n");
      out.write("               replyId: $txtArea.attr(\"vid\"),\r\n");
      out.write("               replyContent: $txtArea.val()\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            $.ajax({\r\n");
      out.write("\t                url : '/ourmine/reply/replyUpdate',\r\n");
      out.write("\t                data : JSON.stringify(boardReplyVO),   // data : {\"bonum\" : reply.bonum},\r\n");
      out.write("\t                contentType : \"application/json;charset=utf-8\",\r\n");
      out.write("\t                type : 'post',\r\n");
      out.write("\t                dataType : 'text',  //   받아온 값에 JSON.parse\r\n");
      out.write("\t                beforeSend : function(xhr){  // 헤더에 값 세팅, 항상 요따구로 씀\r\n");
      out.write("\t                    xhr.setRequestHeader(header, token);\r\n");
      out.write("\t                },\r\n");
      out.write("\t                success : function(res){\r\n");
      out.write("\t                    console.log(\"check: \", res);\r\n");
      out.write("\t                    Swal.fire({\r\n");
      out.write("                            icon: 'success',\r\n");
      out.write("                            title: '댓글 수정완료',\r\n");
      out.write("                            confirmButtonText: '확인',\r\n");
      out.write("                        }).then((result) => {\r\n");
      out.write("                            if (result.isConfirmed) {\r\n");
      out.write("                            \treplyGetList(bvidValue);\r\n");
      out.write("                            }\r\n");
      out.write("                        })\r\n");
      out.write("\t                },\r\n");
      out.write("\t                error : function(xhr){\r\n");
      out.write("\t//                     alert(\"상태 : \", \"실패\");\r\n");
      out.write("\t                }\r\n");
      out.write("\r\n");
      out.write("\t            });\r\n");
      out.write("\t        });\r\n");
      out.write("\r\n");
      out.write("        \t$(\"#boardTypeDelBtn\").on(\"click\", function(){\r\n");
      out.write("        \t\tBoTyDelModal.style.display=\"block\";\r\n");
      out.write("        \t});\r\n");
      out.write("\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        const gridDiv = document.querySelector(\"#myGrid\");\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                const columnDefs = [\r\n");
      out.write("//                     { field: \"boardTypeId\", headerName: \"게시판종류\", cellStyle: {textAlign: 'center'}, maxWidth: 100 },\r\n");
      out.write("                    { field: \"boardId\", headerName: \"게시글번호\", cellStyle: {textAlign: 'center'}, maxWidth: 200 },\r\n");
      out.write("                    { field: \"boardWriter\", headerName: \"글쓴이\", cellStyle: {textAlign: 'center'}, maxWidth: 200 },\r\n");
      out.write("                    { field: \"boardTitle\", headerName: \"제목\", cellStyle: {textAlign: 'left'}, minWidth: 300 },\r\n");
      out.write("                    { field: \"boardCount\", headerName: \"조회수\", cellStyle: {textAlign: 'center'}, maxWidth: 200 },\r\n");
      out.write("                    { field: \"boardWriteDate\", headerName: \"작성일자\", cellStyle: {textAlign: 'center'}, maxWidth: 250 },\r\n");
      out.write("                    { field: \"boardModifyDate\", headerName: \"수정일자\", cellStyle: {textAlign: 'center'}, maxWidth: 250 }\r\n");
      out.write("\r\n");
      out.write("                ];\r\n");
      out.write("\r\n");
      out.write("                // specify the data\r\n");
      out.write("                // const rowData = [];\r\n");
      out.write("\r\n");
      out.write("                // let the grid know which columns and what data to use\r\n");
      out.write("                const gridOptions = {\r\n");
      out.write("                    defaultColDef: {    // 일일이 컬럼에 정의하지 않고 한번에 기본 옵션 설정!\r\n");
      out.write("                        sortable: true,\r\n");
      out.write("                        filter: true,\r\n");
      out.write("                        resizable: true,\r\n");
      out.write("                        editable: false,\r\n");
      out.write("                        setDataValue : true\r\n");
      out.write("                    },\r\n");
      out.write("                    columnDefs: columnDefs,\r\n");
      out.write("                    //row1Data: rowData,\r\n");
      out.write("                    pagination: true,\r\n");
      out.write("                    paginationAutoPageSize: true,\r\n");
      out.write("                    onGridReady: function (event) {\t\t// 열 자동 조절 기능\r\n");
      out.write("                        event.api.sizeColumnsToFit();\r\n");
      out.write("                    },\r\n");
      out.write("                    onCellClicked: params => { // example event handler\r\n");
      out.write("                        console.log('cell was clicked ㅇㅇㅇ', params.data);\r\n");
      out.write("\t\t\t\t\t\tlet boardIdParam = params.data.boardId;\r\n");
      out.write("\t\t\t\t\t\tlet files2 = document.querySelector('#files2');\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                    \t// DB 조회수증가\r\n");
      out.write("\t\t\t\t\t\taxios.get(`/ourmine/boardCoNotice/boardCoFile/${boardIdParam}`, {headers:headers})\r\n");
      out.write("\t\t\t\t\t\t\t\t.then(resp => {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfiles2.innerHTML = '';\r\n");
      out.write("\t\t\t\t\t\t\t\t\tconsole.log(\"resp.data =\" ,resp.data);\r\n");
      out.write("\t\t\t\t\t\t\t\t\tlet axiosData = resp.data;\r\n");
      out.write("\t\t\t\t\t\t\t\t\tconsole.log(\"엑시오스 데이터\",axiosData);\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfiles2.innerHTML += axiosData.files.map(item => item.original !== null ?  `<a href=\"/ourmine/uploadAAA/${item.uuid}\" download=\"${item.original}\">${item.original}<a><br>` : `<a></a>`).join('');\r\n");
      out.write("\t\t\t\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tboardIdParam = JSON.stringify(boardIdParam);\r\n");
      out.write("                    \tboardHitUpdate(boardIdParam);\r\n");
      out.write("                    \treplyGetList(boardIdParam);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                    \t// 화면 조회수증가\r\n");
      out.write("                        let boardVO = params.data;\r\n");
      out.write("                        let boTypeId = boardVO.boardTypeId;\r\n");
      out.write("                    \tconsole.log(\"boTypeId\",boTypeId);\r\n");
      out.write("                    \tlet boardId = boardVO.boardId;\r\n");
      out.write("                    \tboNo = (boardVO.boardCount);\r\n");
      out.write("                    \tconsole.log(\"boNo1\",boNo);\r\n");
      out.write("\r\n");
      out.write("                    \tboNo = boNo + 1 ;\r\n");
      out.write("                    \tconsole.log(\"boNo2\",boNo);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                    \t//상세조회 모달\r\n");
      out.write("                        $(\"#boardTypeId1\").html(boardVO.boardTypeId);\r\n");
      out.write("                        $(\".boardTitle\").html(boardVO.boardTitle);\r\n");
      out.write("                        $(\"#boardId\").html(boardId);\r\n");
      out.write("                        $(\"#boardId1\").val(boardId);\r\n");
      out.write("\r\n");
      out.write("                        $(\"#boardWriter\").html(boardVO.boardWriter);\r\n");
      out.write("                        $(\"#boardWriteDate\").html(boardVO.boardWriteDate);\r\n");
      out.write("                        $(\"#boardCount\").html(boNo);\r\n");
      out.write("                        $(\"#boardContent\").html(boardVO.boardContent);\r\n");
      out.write("\r\n");
      out.write("                        JIModal.style.display=\"block\";\r\n");
      out.write("\r\n");
      out.write("                        // 삭제모달\r\n");
      out.write("                        let boIdData = params.data.boardId;\r\n");
      out.write("                        console.log(\"boIdData:{}\",boIdData)\r\n");
      out.write("                        $('#JIDelete').on('click', function(){\r\n");
      out.write("                           jiDelete(boIdData);\r\n");
      out.write("                        });\r\n");
      out.write("\r\n");
      out.write("              }\r\n");
      out.write("            //paginationPageSize:8,\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        //  게시글 등록\r\n");
      out.write("        headers['Content-Type'] = 'application/json'\r\n");
      out.write("\t    headers['accept'] = 'application/json'\r\n");
      out.write("\r\n");
      out.write("\t\tconst autoBoard = () =>{\r\n");
      out.write("\t\t\tlet autoBoardTitle = document.querySelector(\"#boardTitleClear\");\r\n");
      out.write("\t\t\tlet autoBoardContent = document.querySelector(\"#boardContentClear\");\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tautoBoardTitle.value=\"토요일마다 함께 자바스크립트 공부하실분 모집합니다.\";\r\n");
      out.write("\t\t\tautoBoardContent.value=\"토요일마다 함께 자바스크립트 공부하실분 댓글남겨주시면 단톡방 초대드리겠습니다~!^^\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t    \r\n");
      out.write("\t    \r\n");
      out.write("      let g_debug = false;  // 디버깅 여부 결정\r\n");
      out.write("\t\tconst handleSubmit = (e) => {\r\n");
      out.write("            e.preventDefault();\r\n");
      out.write("\r\n");
      out.write("            let btid = document.querySelector(\"#boardTypeId3\");\r\n");
      out.write("\t       \tlet boardTitleClear = document.querySelector(\"#boardTitleClear\");\r\n");
      out.write("\t       \tlet boardContentClear = document.querySelector(\"#boardContentClear\");\r\n");
      out.write("\r\n");
      out.write("\t  \t\tlet btidvalue = btid.value;\r\n");
      out.write("\t      \tconsole.log(\"btidvalue: {}\", btidvalue);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            if(g_debug){\r\n");
      out.write("               console.log(\"boardTypeId\",$(\"#boardTypeId3\").val());\r\n");
      out.write("               console.log(\"boardTitle\",$(\"#jiinsertModal [name=boardTitle]\").val()); // css 선택자\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            let contextval = (\"boardContent\",$(\"#jiinsertModal [name=boardContent]\").val());\r\n");
      out.write("//             alert(contextval);\r\n");
      out.write("            let boardContent = contextval.replaceAll(\"\\n\", \"<br>\");\r\n");
      out.write("               console.log(\"boardContent:{}\",boardContent); // css 선택자\r\n");
      out.write("\r\n");
      out.write("            let formData = new FormData(); // AJAX로 파일 보낼 땐 요거이 필요해\r\n");
      out.write("            formData.append(\"boardTypeId\",$(\"#boardTypeId3\").val());\r\n");
      out.write("            formData.append(\"boardTitle\",$(\"#jiinsertModal [name=boardTitle]\").val()); // css 선택자\r\n");
      out.write("            formData.append(\"boardContent\",boardContent);\r\n");
      out.write("            // 여러개 담아어 돌러서\r\n");
      out.write("\r\n");
      out.write("            let fileListDiv = document.querySelector(\"#fileListDiv\");\r\n");
      out.write("            let files = $(\"#jiinsertModal [name=files]\")[0].files;\r\n");
      out.write("            for(let i=0; i<files.length; i++){\r\n");
      out.write("               console.log(\"file\",files[i].name);\r\n");
      out.write("               formData.append(\"files\",files[i]);\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            $.ajax({\r\n");
      out.write("               method:\"post\",\r\n");
      out.write("               url:\"/ourmine/company/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${companyId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/project/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projectId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/board/boardForm\",\r\n");
      out.write("               data:formData,\r\n");
      out.write("               dataType:\"text\",\r\n");
      out.write("               contentType: false,\t// 파일 추가 시 필수. 'application/json'사용 불가\r\n");
      out.write("\t\t\t      processData: false,\t// 파일 추가 시 필수\r\n");
      out.write("\t\t\t      cache: false,\t// 파일 추가 시 선택사항\r\n");
      out.write("\t\t\t      beforeSend:function(xhr){\t// headers에 contentType='application/json'포함되어 있어 따로 적어줘야 함\r\n");
      out.write("\t\t\t\t\t   xhr.setRequestHeader(headerName, headerValue);\r\n");
      out.write("\t\t\t      },\r\n");
      out.write("               success:function(rdata){\r\n");
      out.write("            \t    jiinsertClose();\r\n");
      out.write("            \t    $('#insertjiModal')[0].reset();\r\n");
      out.write("\t                fgetData(btidvalue);\r\n");
      out.write("               },\r\n");
      out.write("               error: function (request, status, error) {\r\n");
      out.write("                  console.log(\"code: \" + request.status)\r\n");
      out.write("                 // console.log(\"message: \" + request.responseText)\r\n");
      out.write("                 // console.log(\"error: \" + error);\r\n");
      out.write("               }\r\n");
      out.write("            })\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        boardTypeList2();\r\n");
      out.write("        fgetData(");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.typeNumber}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(");\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    </script>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_security_005fcsrfInput_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  security:csrfInput
    org.springframework.security.taglibs.csrf.CsrfInputTag _jspx_th_security_005fcsrfInput_005f0 = (org.springframework.security.taglibs.csrf.CsrfInputTag) _005fjspx_005ftagPool_005fsecurity_005fcsrfInput_005fnobody.get(org.springframework.security.taglibs.csrf.CsrfInputTag.class);
    boolean _jspx_th_security_005fcsrfInput_005f0_reused = false;
    try {
      _jspx_th_security_005fcsrfInput_005f0.setPageContext(_jspx_page_context);
      _jspx_th_security_005fcsrfInput_005f0.setParent(null);
      int _jspx_eval_security_005fcsrfInput_005f0 = _jspx_th_security_005fcsrfInput_005f0.doStartTag();
      if (_jspx_th_security_005fcsrfInput_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fsecurity_005fcsrfInput_005fnobody.reuse(_jspx_th_security_005fcsrfInput_005f0);
      _jspx_th_security_005fcsrfInput_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_security_005fcsrfInput_005f0, _jsp_getInstanceManager(), _jspx_th_security_005fcsrfInput_005f0_reused);
    }
    return false;
  }
}
