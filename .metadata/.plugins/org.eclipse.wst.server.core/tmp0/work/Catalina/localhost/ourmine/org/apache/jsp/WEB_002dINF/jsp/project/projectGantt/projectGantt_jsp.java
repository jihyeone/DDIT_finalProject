/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2023-06-04 23:36:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.project.projectGantt;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class projectGantt_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("jar:file:/E:/A_TeachingMaterial/05_JSP_Spring/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ourmine/WEB-INF/lib/spring-security-taglibs-5.7.8.jar!/META-INF/security.tld", Long.valueOf(1681713972000L));
    _jspx_dependants.put("/WEB-INF/lib/spring-security-taglibs-5.7.8.jar", Long.valueOf(1683020361417L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1679567181629L));
    _jspx_dependants.put("jar:file:/E:/A_TeachingMaterial/05_JSP_Spring/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ourmine/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div id=\"mytask-layout\" >\r\n");
      out.write("    <!-- main body area -->\r\n");
      out.write("    <div class=\"main px-lg-4 px-md-4\">\r\n");
      out.write("        <!-- Body: Body -->\r\n");
      out.write("        <div class=\"body d-flex py-3\">\r\n");
      out.write("         <!-- Row End -->\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"card\">\r\n");
      out.write("                            <div  class=\"card-header py-3 d-flex justify-content-between align-items-center\">\r\n");
      out.write("                                <div class=\"info-header\">\r\n");
      out.write("                                    <h6 class=\"mb-0 fw-bold \">간트 차트</h6>\r\n");
      out.write("                                </div>\r\n");
      out.write("                                <button class=\"btn btn-sm btn-link  dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"></button>\r\n");
      out.write("                                <ul class=\"dropdown-menu border-0 shadow dropdown-menu-end\">\r\n");
      out.write("                                    <li><a class=\"dropdown-item py-2 rounded\" href=\"#\">Last 7 days</a></li>\r\n");
      out.write("                                    <li><a class=\"dropdown-item py-2 rounded\" href=\"#\">Last 30 days</a></li>\r\n");
      out.write("                                    <li><a class=\"dropdown-item py-2 rounded\" href=\"#\">Last 60 days</a></li>\r\n");
      out.write("                                </ul>\r\n");
      out.write("                            </div>\r\n");
      out.write("                            <div class=\"card-body\">\r\n");
      out.write("                                <div id=\"apex-timeline\"></div>\r\n");
      out.write("\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("                <!-- Row End -->\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("// Timeline\r\n");
      out.write("$(document).ready(function(data) {\r\n");
      out.write("\r\n");
      out.write("   console.log(\"간트차트\");\r\n");
      out.write("    $.ajax({\r\n");
      out.write("         url: \"/ourmine/company/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${companyId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/project/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${projectId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/projectGantt/ganttList\", // 데이터를 가져올 JSP 페이지의 URL\r\n");
      out.write("         method: \"GET\",\r\n");
      out.write("         contentType: \"application/json;charset=utf-8\",\r\n");
      out.write("         dataType: \"json\",\r\n");
      out.write("         success: function(data) {\r\n");
      out.write("             // 데이터를 가져온 후 차트를 생성하는 로직\r\n");
      out.write("             // 차트에 사용할 데이터 배열\r\n");
      out.write("             var seriesData = [];\r\n");
      out.write("             var names = [];\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("             /* var date= {\r\n");
      out.write("            \t\t yaxis: [new Date(date.projectStart), new Date(date.projectEnd)]\r\n");
      out.write("             }\r\n");
      out.write("             console.log(date);*/\r\n");
      out.write("\r\n");
      out.write("             // 데이터 배열에 name:담당자, x:일감 및 y:날짜 정보를 추가\r\n");
      out.write("\r\n");
      out.write("             /*\r\n");
      out.write("               억지 데이터 모양 맹글기\r\n");
      out.write("               나중에 리팩토링(함수로) 하면 좋을 듯\r\n");
      out.write("             */\r\n");
      out.write("             for (var i = 0; i < data.length; i++) {\r\n");
      out.write("                 var item = data[i];\r\n");
      out.write("                 //names.push(item.name);\r\n");
      out.write("                 var chartItem = {\r\n");
      out.write("                     x: item.x,\r\n");
      out.write("                     y:[new Date(item.start), new Date(item.end)],\r\n");
      out.write("                 };\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                 var isRepeat = false;\r\n");
      out.write("                 var sIndex;\r\n");
      out.write("                 for(let j=0; j < seriesData.length; j++){\r\n");
      out.write("                        for(let z=0; z<seriesData[j].data.length; z++){\r\n");
      out.write("                           //console.log(\"비교\",seriesData[j].name, item.name)\r\n");
      out.write("                            if(seriesData[j].name == item.name){\r\n");
      out.write("                              isRepeat = true;\r\n");
      out.write("                              sIndex =j;\r\n");
      out.write("                              break;\r\n");
      out.write("                           }\r\n");
      out.write("                        }\r\n");
      out.write("                 }\r\n");
      out.write("\r\n");
      out.write("                 if(isRepeat){\r\n");
      out.write("                    seriesData[sIndex].data.push(chartItem);\r\n");
      out.write("                 }else {\r\n");
      out.write("                     var chartData = {\r\n");
      out.write("                             name: item.name,\r\n");
      out.write("                             data: [chartItem]\r\n");
      out.write("                     };\r\n");
      out.write("                     seriesData.push(chartData);\r\n");
      out.write("                 }\r\n");
      out.write("\r\n");
      out.write("             }\r\n");
      out.write("\r\n");
      out.write("             // 최소 날짜와 최대 날짜를 찾아서 y축의 범위를 설정하는 부분\r\n");
      out.write("             var mindates = data.map(function(item) {\r\n");
      out.write("                 return new Date(item.min);\r\n");
      out.write("             });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("             var maxdates = data.map(function(item) {\r\n");
      out.write("                 return new Date(item.max);\r\n");
      out.write("             });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("             var minDate = new Date(Math.min.apply(null, mindates));\r\n");
      out.write("             var maxDate = new Date(Math.max.apply(null, maxdates));\r\n");
      out.write("\r\n");
      out.write("             console.log(\"minDate\",minDate);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("             console.log(\"@@@나재경@@@:\",seriesData);\r\n");
      out.write("\r\n");
      out.write("             var options = {\r\n");
      out.write("                     chart: {\r\n");
      out.write("                         height: 700,\r\n");
      out.write("                         type: 'rangeBar',\r\n");
      out.write("                         toolbar: {\r\n");
      out.write("                             show: false,\r\n");
      out.write("                         },\r\n");
      out.write("                         theme: {\r\n");
      out.write("                               mode: 'dark' // 테마 모드 설정 (light, dark, or custom)\r\n");
      out.write("                             }\r\n");
      out.write("                     },\r\n");
      out.write("                     plotOptions: {\r\n");
      out.write("                         bar: {\r\n");
      out.write("                             barHeight: '99%',\r\n");
      out.write("                             horizontal: true,\r\n");
      out.write("                         }\r\n");
      out.write("                     },\r\n");
      out.write("\r\n");
      out.write("                     colors: ['var(--chart-color1)', 'var(--chart-color2)', 'var(--chart-color3)','var(--chart-color4)'\r\n");
      out.write("                             , 'var(--chart-color5)', 'var(--chart-color6)','var(--chart-color7)','var(--chart-color8)'],\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                     series: seriesData,\r\n");
      out.write("                     noData: {\r\n");
      out.write("                         text: 'Loading...'\r\n");
      out.write("                       },\r\n");
      out.write("                     yaxis: {\r\n");
      out.write("                    \ttype: 'datetime',\r\n");
      out.write("                    \tmin: minDate.getTime(),\r\n");
      out.write("                    \tmax: maxDate.getTime()\r\n");
      out.write("                     },\r\n");
      out.write("                     xaxis: {\r\n");
      out.write("                        type: 'datetime',\r\n");
      out.write("                     }\r\n");
      out.write("                 };\r\n");
      out.write("\r\n");
      out.write("             var chart = new ApexCharts(\r\n");
      out.write("                     document.querySelector(\"#apex-timeline\"),\r\n");
      out.write("                     options\r\n");
      out.write("                 );\r\n");
      out.write("\r\n");
      out.write("                 chart.render();\r\n");
      out.write("\r\n");
      out.write("/*           // ApaxChart RangeBar 생성\r\n");
      out.write("            var chart = new ApaxChart({\r\n");
      out.write("                        container: document.querySelector(\"#apex-timeline\"),\r\n");
      out.write("                        series: [{\r\n");
      out.write("                            type: 'rangebar',\r\n");
      out.write("                            data: chartData\r\n");
      out.write("                        }]\r\n");
      out.write("                    });\r\n");
      out.write("\r\n");
      out.write("             // 차트 그리기\r\n");
      out.write("             chart.draw(); */\r\n");
      out.write("         },\r\n");
      out.write("         error: function(xhr, status, error) {\r\n");
      out.write("             // 오류 처리\r\n");
      out.write("             console.log(error);\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        /* var options = {\r\n");
      out.write("            chart: {\r\n");
      out.write("                height: 600,\r\n");
      out.write("                type: 'rangeBar',\r\n");
      out.write("                toolbar: {\r\n");
      out.write("                    show: false,\r\n");
      out.write("                },\r\n");
      out.write("                theme: 'light' // 테마지정?\r\n");
      out.write("            },\r\n");
      out.write("            plotOptions: {\r\n");
      out.write("                bar: {\r\n");
      out.write("                    horizontal: true,\r\n");
      out.write("                }\r\n");
      out.write("            },\r\n");
      out.write("\r\n");
      out.write("            colors: ['var(--chart-color1)', 'var(--chart-color2)', 'var(--chart-color4)'],\r\n");
      out.write("\r\n");
      out.write("            series: [{\r\n");
      out.write("               data: chartData\r\n");
      out.write("            }],\r\n");
      out.write("            noData: {\r\n");
      out.write("                text: 'Loading...'\r\n");
      out.write("              },\r\n");
      out.write("            yaxis: {\r\n");
      out.write("                min: new Date('2023-05-01').getTime(),\r\n");
      out.write("                max: new Date('2023-05-30').getTime(),\r\n");
      out.write("                //max: new Date('2020-03-18').getTime(),\r\n");
      out.write("            },\r\n");
      out.write("            xaxis: {\r\n");
      out.write("               type: 'datetime'\r\n");
      out.write("            }\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("    var chart = new ApexCharts(\r\n");
      out.write("            document.querySelector(\"#apex-timeline\"),\r\n");
      out.write("            options\r\n");
      out.write("        );\r\n");
      out.write("\r\n");
      out.write("        chart.render(); */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    /* function projectGanttList(){\r\n");
      out.write("\r\n");
      out.write("      axios({\r\n");
      out.write("        method: 'GET',\r\n");
      out.write("        url: \"/ourmine/company/{companyId}/project/{projectId}/projectGantt/ganttList\",\r\n");
      out.write("      }).then(function(response) {\r\n");
      out.write("        chart.updateSeries([{\r\n");
      out.write("          name: ganttList(data),\r\n");
      out.write("          data: response.data\r\n");
      out.write("        }])\r\n");
      out.write("      })\r\n");
      out.write("\r\n");
      out.write("    } */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/js/apexcharts.bundle.js\"></script>\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
