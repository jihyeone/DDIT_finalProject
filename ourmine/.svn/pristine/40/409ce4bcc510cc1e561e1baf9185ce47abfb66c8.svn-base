package kr.or.ddit.statistics.controller;

import javax.inject.Inject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;

import kr.or.ddit.statistics.service.StatisticsService;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/company/{companyId}/statistics")
public class StatisticsController {

	@Autowired
	private StatisticsService service;
	
	// 통계 정보를 위하여 모든 정보를 모델에 추가
	@GetMapping
	public String statistic(@PathVariable int companyId,
							Model model) {
		model.addAttribute("companyId", companyId);
		model.addAttribute("projectWholeCount", service.selectProjectCount(companyId));
		model.addAttribute("projectStatusIncomplete", service.selectProjectStatusIncomplete(companyId));
		model.addAttribute("projectStatusComplete", service.selectProjectStatusComplete(companyId));
		model.addAttribute("projectWorkPriorityCount", service.selectProjectWorkPriorityCount(companyId));
		model.addAttribute("projectWorkPriorityEmergency", service.selectProjectWorkPriorityEmergency(companyId));
		model.addAttribute("projectWorkPriorityHigh", service.selectProjectWorkPriorityHigh(companyId));
		model.addAttribute("projectWorkPriorityNormal", service.selectProjectWorkPriorityNormal(companyId));
		model.addAttribute("projectWorkPriorityLow", service.selectProjectWorkPriorityLow(companyId));
		model.addAttribute("projectWorkStatusCount", service.selectProjectWorkStatusCount(companyId));
		model.addAttribute("projectWorkStatusRequest", service.selectProjectWorkStatusRequest(companyId));
		model.addAttribute("projectWorkStatusProceed", service.selectProjectWorkStatusProceed(companyId));
		model.addAttribute("projectWorkStatusFeedback", service.selectProjectWorkStatusFeedback(companyId));
		model.addAttribute("projectWorkStatusPostpone", service.selectProjectWorkStatusPostpone(companyId));
		model.addAttribute("projectWorkStatusComplete", service.selectProjectWorkStatusComplete(companyId));
		model.addAttribute("projectWorkIssueStatusCount", service.selectProjectIssueStatusCount(companyId));
		model.addAttribute("projectWorkIssueStatusEmergency", service.selectProjectIssueStatusEmergency(companyId));
		model.addAttribute("projectWorkIssueStatusNormal", service.selectProjectIssueStatusNormal(companyId));
		model.addAttribute("projectWorkIssueStatusLow", service.selectProjectIssueStatusLow(companyId));
		model.addAttribute("projectWorkIssueCategoryError", service.selectProjectIssueCategoryError(companyId));
		model.addAttribute("projectWorkIssueCategoryModify", service.selectProjectIssueCategoryModify(companyId));
		model.addAttribute("projectWorkIssueCategoryEvent", service.selectProjectIssueCategoryEvent(companyId));
		log.info("projectWholeCount : {}", service.selectProjectCount(companyId));
		return "statistics/Statistics";
	}
}
